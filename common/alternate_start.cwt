enums = {
    enum[alternate_start_setting_types] = {
        ### A checkbox with two states.
        checkbox
        ### A slider with one selector.
        slider
        ### A slider with two bounding selectors.
        double_slider
        ### Any number of options which you can click through.
        selection
        ### The setting needs a gui window with "alt_setting_<alternate_start_setting>_entry", a button for each option (with the same name) and a "selection_indicator" icon. These will be used for a custom selector.
        custom
    }
    enum[alternate_start_holding_type] = {
        ### Does not touch holdings, but makes all rulers of one or two holding tribal provinces (note holdings, not slots) of Nomadic cultures Nomads.
        historical
        ### Makes every county in the game have a feudal, temple, and city holding, in that order.
        feudal
        ### Makes every county in the game have just a single tribal holding.
        tribal
        ### Makes every county in the game have no holdings whatsoever.
        nomadic
        ### Makes all Nomadic cultured provinces (as defined in the culture itself) have no holdings. Everything else has a single tribal holding.
        tribal_nomadic
    }
    enum[alternate_start_holding_slots] = {
        ### No change, but can be checked from script.
        historical
        ### Causes the number of holding slots to be randomized between 1 and 7. Formula is ( 2d7 + 1 ) / 2.
        random
        ### Causes the number of holding slots to be set to one in the whole world.
        one
        ### Causes the number of holding slots to be set to two in the whole world.
        two
        ### Causes the number of holding slots to be set to three in the whole world.
        three
        ### Causes the number of holding slots to be set to four in the whole world.
        four
        ### Causes the number of holding slots to be set to five in the whole world.
        five
        ### Causes the number of holding slots to be set to six in the whole world.
        six
        ### Causes the number of holding slots to be set to seven in the whole world.
        seven
    }
    enum[alternate_start_culture_religion] = {
        ### No randomisation, but can be checked from script.
        historical
        ### Randomised among the normal members of the type.
        random
        ### Randomised, including special cultures/religions and heresies.
        full_random
    }
    enum[alternate_start_dejure_kingdoms_empires] = {
        ### No change, but can be checked from script.
        historical
        ### All de jure titles of this tier and above (if any) are removed.
        none
        ### All de jure titles of this tier are replaced with random ones.
        random
    }
    enum[alternate_start_technology] = {
        ### No change, but can be checked from script.
        historical
        ### Randomised somehow, no docs.
        random
        ### Causes all provinces to have the same tech level (interpolated by year between the ideal years for 0 and 8 tech).
        flat
    }
}

### Elevate a count in every duchy to duke, and vassalize the other counts.
alias[alternate_start_setting_property:generate_dukes] = yes

### The dukes will also get every county in their duchy, held personally.
alias[alternate_start_setting_property:consolidate_dukes] = yes

### Determines the types of holdings across the world.
alias[alternate_start_setting_property:holding_type] = enum[alternate_start_holding_type]

### Determines the amount of holding slots in provinces across the world.
alias[alternate_start_setting_property:holding_slots] = enum[alternate_start_holding_slots]

### Determines the randomisation of cultures.
alias[alternate_start_setting_property:culture] = enum[alternate_start_culture_religion]

### Determines the randomisation of religions.
alias[alternate_start_setting_property:religion] = enum[alternate_start_culture_religion]

###
alias[alternate_start_setting_property:technology] = enum[alternate_start_technology]

### Changes de jure kingdoms.
alias[alternate_start_setting_property:dejure_kingdoms] = enum[alternate_start_dejure_kingdoms_empires]

### Changes de jure empires.
alias[alternate_start_setting_property:dejure_empires] = enum[alternate_start_dejure_kingdoms_empires]

### No effect, but can be checked from script.
alias[alternate_start_setting_property:holy_sites] = historical

### Causes holy sites for any religion with provinces on the map to be randomized.
alias[alternate_start_setting_property:holy_sites] = random

### No effect, but can be checked from script.
alias[alternate_start_setting_property:culture_names] = historical

### Causes culture names to get randomized.
alias[alternate_start_setting_property:culture_names] = random

### No effect, but can be checked from script.
alias[alternate_start_setting_property:religion_names] = historical

### Causes religion names to get randomized.
alias[alternate_start_setting_property:religion_names] = random

### No effect, but can be checked from script.
alias[alternate_start_setting_property:religion_features] = historical

### Causes religions to have their features reset, and then generated from common/religion_features.
alias[alternate_start_setting_property:religion_features] = random

### If yes, elevate counts to dukes if they meet certain requirements.
alias[alternate_start_setting_property:generate_random_dukes] = bool

### If yes, elevate rulers to kings if they meet certain requirements.
alias[alternate_start_setting_property:generate_random_kings] = bool

### If yes, elevate rulers to emperors if they meet certain requirements.
alias[alternate_start_setting_property:generate_random_emperors] = bool

### Randomizes the holdings in the world.
alias[alternate_start_setting_property:generate_random_holdings] = yes

### Just check the docs for these.
alias[alternate_start_setting_property:duke_threshold] = int
### Just check the docs for these.
alias[alternate_start_setting_property:duke_ignore_rate] = int
### Just check the docs for these.
alias[alternate_start_setting_property:duke_vassalization_rate] = int

### Just check the docs for these.
alias[alternate_start_setting_property:king_threshold] = int
### Just check the docs for these.
alias[alternate_start_setting_property:king_ignore_rate] = int
### Just check the docs for these.
alias[alternate_start_setting_property:king_vassalization_rate] = int

### Just check the docs for these.
alias[alternate_start_setting_property:emperor_threshold] = int
### Just check the docs for these.
alias[alternate_start_setting_property:emperor_ignore_rate] = int
### Just check the docs for these.
alias[alternate_start_setting_property:emperor_vassalization_rate] = int

### Just check the docs for these.
alias[alternate_start_setting_property:feudal_seeds] = int
### Just check the docs for these.
alias[alternate_start_setting_property:tribal_seeds] = int
### Just check the docs for these.
alias[alternate_start_setting_property:nomadic_seeds] = int

# Actually can't be checked. The setting of the value doesn't work, sadly.
### Custom parameter with no intrinsic effect. Can be checked in script with has_alternate_parameter
alias[alternate_start_setting_property:value_set[alternate_start_setting_custom_property]] = scalar

types = {
    ## type_key_filter <> { culture_group_spread culture_spread religion_group_spawn religion_group_spread religion_spread dejure_kingdom_spread dejure_empire_spread holy_site_spread holding_spread adjacencies religion_name_formats }
    type[alternate_start_setting] = {
        path_strict = yes
        path = "game/common/alternate_start"

        subtype[checkbox] = {
            type = checkbox
        }
        subtype[slider] = {
            type = slider
        }
        subtype[double_slider] = {
            type = double_slider
        }
        subtype[selection] = {
            type = selection
        }
        subtype[custom] = {
            type = custom
        }

        localisation = {
            name = "setting_$"
            tooltip = "$_tooltip"
            tooltip_delayed = "$_tooltip_delayed"
        }
    }
    # This is one of those types where I'd need "skip_root_key = list", but *not* in list - so a NOR
    # As it is this really seems to be screwed up so I'll skip doing it like that for now
    # type[alternate_start_setting_option] = {
    #
    #     path_strict = yes
    #     path = "game/common/alternate_start"
    #     skip_root_key = any

    #     localisation = {
    #         name = "<parent>_$"
    #         tooltip = "$_tooltip"
    #         tooltip_delayed = "$_tooltip_delayed"
    #     }
    # }
    ## type_key_filter = adjacencies
    type[alternate_start_adjacencies] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = religion_name_formats
    type[alternate_start_religion_naming] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = culture_group_spread
    type[alternate_start_culture_group_spread] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = culture_spread
    type[alternate_start_culture_spread] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = religion_group_spawn
    type[alternate_start_religion_group_spawn] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = religion_group_spread
    type[alternate_start_religion_group_spread] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = religion_spread
    type[alternate_start_religion_spread] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = dejure_kingdom_spread
    type[alternate_start_dejure_kingdom_spread] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = dejure_empire_spread
    type[alternate_start_dejure_empire_spread] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = holy_site_spread
    type[alternate_start_holy_site_spread] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
    ## type_key_filter = holding_spread
    type[alternate_start_holding_spread] = {
        path_strict = yes
        path = "game/common/alternate_start"
    }
}

## replace_scope = { this = no_scope root = no_scope }
alternate_start_setting = {
    ### The setting's type.
    type = enum[alternate_start_setting_types]

    ## cardinality = 0..1
    ### The setting's sort priority in the list. Can be negative.
    sort_priority = int

    ## cardinality = 0..1
    ### If yes, the "separator" icon will be shown on the GUI entry. Defaults to "no".
    separator = bool

    ## cardinality = 0..1
    ### Conditions for the setting to appear on the list. Evaluated once, when the window is opened.
    potential = {
        ## cardinality = 0..inf
        alias_name[trigger] = alias_match_left[trigger]
    }

    ## cardinality = 0..1
    ### Conditions for the setting to be enabled.
    trigger = {
        ## cardinality = 0..inf
        alias_name[trigger] = alias_match_left[trigger]
    }

    subtype[checkbox] = {
        ## cardinality = 0..1
        ### If set, this will be the default value of the setting in a randomised world.
        random_default = scalar

        ## cardinality = 0..1
        ### If set, this will be the default value of the setting in a shattered world.
        shattered_default = scalar

        ## cardinality = 0..1
        checked = {
            ## cardinality = 0..inf
            alias_name[alternate_start_setting_property] = alias_match_left[alternate_start_setting_property]

            ## cardinality = 0..1
            effect = {
                ## cardinality = 0..inf
                alias_name[effect] = alias_match_left[effect]
            }
        }

        ## cardinality = 0..1
        unchecked = {
            ## cardinality = 0..inf
            alias_name[alternate_start_setting_property] = alias_match_left[alternate_start_setting_property]

            ## cardinality = 0..1
            effect = {
                ## cardinality = 0..inf
                alias_name[effect] = alias_match_left[effect]
            }
        }
    }

    subtype[selection] = {
        ## cardinality = 0..1
        ### If set, this will be the default value of the setting in a randomised world.
        random_default = scalar

        ## cardinality = 0..1
        ### If set, this will be the default value of the setting in a shattered world.
        shattered_default = scalar

        ## cardinality = 1..inf
        scalar = {
            ## cardinality = 0..inf
            alias_name[alternate_start_setting_property] = alias_match_left[alternate_start_setting_property]

            ## cardinality = 0..1
            effect = {
                ## cardinality = 0..inf
                alias_name[effect] = alias_match_left[effect]
            }
        }
    }

    subtype[custom] = {
        ## cardinality = 0..1
        ### If set, this will be the default value of the setting in a randomised world.
        random_default = scalar

        ## cardinality = 0..1
        ### If set, this will be the default value of the setting in a shattered world.
        shattered_default = scalar

        ## cardinality = 1..inf
        ###
        scalar = {
            ## cardinality = 0..inf
            alias_name[alternate_start_setting_property] = alias_match_left[alternate_start_setting_property]

            ## cardinality = 0..1
            effect = {
                ## cardinality = 0..inf
                alias_name[effect] = alias_match_left[effect]
            }
        }
    }

    subtype[slider] = {
        ### The default value of the selector.
        default = int

        ### The minimum value of the selector.
        min = int

        ### The maximum value of the selector.
        max = int
    }

    subtype[double_slider] = {
        ### The default value of the left selector.
        min_default = int

        ### The default value of the right selector.
        max_default = int

        ### The minimum value of the selector.
        min = int

        ### The maximum value of the selector.
        max = int
    }

    ## cardinality = 0..1
    ### If yes, applies before characters are generated. Defaults to "no".
    apply_before_generation = bool

    ## cardinality = 0..1
    ### Affects the order in which the settings are executed. Defaults to 0.
    priority = int
}

### Used to determine adjacencies when spreading things in addition to the normal adjacencies, in order to ensure islands are included in the spread. Order does not matter, the connection is two-way.
alternate_start_adjacencies = {
    ## cardinality = 0..inf
    enum[provinces] = enum[provinces]
}

### Will pick one of character, holy_site or dynasty naming for the religion. The rest of the values are determined by the appropriate section.
alternate_start_religion_naming = {
    ### If this option is picked, a list of all provinces with the religion will be made, much like for culture generation. One is picked at random, and the culture in that province used to generate a random male name (weighted as normal), which is then inserted in a random key from this list. Multiple entries make the option more likely.
    character = {
        ## cardinality = 1..inf
        localisation
    }

    ### If this option is picked, a random holy site will get picked and the name of the county will be inserted in a random key from this list. Multiple entries make the option more likely to be picked.
    holy_site = {
        ## cardinality = 1..inf
        localisation
    }

    ### If this option is picked, a list of all provinces with the religion will be made, much like for culture generation. One is picked at random, and the culture in that province used to pick a random dynasty (without restrictions or weighting), the last word of which is then inserted in a random key from this list. Multiple entries make the option more likely.
    dynasty = {
        ## cardinality = 1..inf
        localisation
    }

    ### Used to determine the name for the high god of the religion.
    high_god_name = {
        ## cardinality = 1..inf
        localisation
    }

    ### Used to determine the name for the evil god of the religion.
    evil_god_names = {
        ## cardinality = 1..inf
        localisation
    }

    ### Used to determine the name for the holy scripture of the religion.
    scripture_name = {
        ## cardinality = 1..inf
        localisation
    }

    ### Used to determine the name for the priests of the religion. Multiple entries make the option more likely.
    priest_title = {
        ## cardinality = 1..inf
        localisation
    }

    ### Used to determine the name for the crusades of the religion. Multiple entries make the option more likely.
    crusade_name = {
        ## cardinality = 1..inf
        localisation
    }

    ### Used to determine the name for the piety resource of the religion. Multiple entries make the option more likely.
    piety_name = {
        ## cardinality = 1..inf
        localisation
    }

    ### Used to determine the description of the religion (not heresy). It will try to be unique as long as there are enough keys for all randomly generated religions.
    desc = {
        ## cardinality = 1..inf
        localisation
    }

    ### Used to determine the description of a religion's heresy. It will try to be unique as long as there are enough keys for all heresies.
    heresy_desc = {
        ## cardinality = 1..inf
        localisation
    }
}

## replace_scope = { this = culture root = culture from = province }
### Just check the documentation in common/alternate_start/_documentation.info for this one. ROOT is the first culture in the group, FROM is the province.
alternate_start_culture_group_spread = {
    factor = float

    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
}

## replace_scope = { this = culture root = culture from = province }
### Just check the documentation in common/alternate_start/_documentation.info for this one. ROOT is the culture, FROM is the province.
alternate_start_culture_spread = {
    factor = float

    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
}

## replace_scope = { this = province root = province }
### Just check the documentation in common/alternate_start/_documentation.info for this one. ROOT is the province potentially spawning a religion group.
alternate_start_religion_group_spawn = {
    factor = float

    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
}

## replace_scope = { this = religion root = religion from = province }
### Just check the documentation in common/alternate_start/_documentation.info for this one. ROOT is the first religion in the group, FROM is the province.
alternate_start_religion_group_spread = {
    factor = float

    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
}

## replace_scope = { this = religion root = religion from = province }
### Just check the documentation in common/alternate_start/_documentation.info for this one. ROOT is the religion, FROM is the province.
alternate_start_religion_spread = {
    factor = float

    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
}

## replace_scope = { this = province root = province from = province fromfrom = province }
### Just check the documentation in common/alternate_start/_documentation.info for this one. ROOT is the province being evaluated, FROM is the province closest to the center of the title, FROMFROM is the bordering province to ROOT.
alternate_start_dejure_kingdom_spread = {
    factor = float

    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
}

## replace_scope = { this = province root = province from = province fromfrom = province }
### Just check the documentation in common/alternate_start/_documentation.info for this one. ROOT is the province being evaluated, FROM is the province closest to the center of the title, FROMFROM is the bordering province to ROOT.
alternate_start_dejure_empire_spread = {
    factor = float

    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
}

## replace_scope = { this = province root = province from = religion }
### Just check the documentation in common/alternate_start/_documentation.info for this one. ROOT is the province, FROM is the religion.
alternate_start_holy_site_spread = {
    factor = float

    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
}

## replace_scope = { this = province root = province }
### No docs, sad. ROOT is the province.
alternate_start_holding_spread = {
    factor = float

    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
}