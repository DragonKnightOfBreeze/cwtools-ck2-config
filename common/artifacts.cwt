enums = {
    complex_enum[artifact_slot] = {
        path = "game/common/artifacts"
        start_from_root = yes
        name = {
            slots = {
                enum_name = scalar
            }
        }
    }
}

types = {
    type[artifact] = {
        path = "game/common/artifact"
        localisation = {
            name = "$"
            description = "$_desc"
        }
    }
}

artifact = {
    ## cardinality = 0..inf
    ### Modifiers the artifact applies to its owner.
    alias_name[modifier] = alias_match_left[modifier]

    ## cardinality = 0..1
    ### The artifact's quality. Vanilla uses 1-5.
    quality = int

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character }
    ### Conditions for the artifact to be active. Unowned artifacts are active only if they don't have this block.
    active = {
        ## cardinality = 0..inf
        alias_name[trigger] = alias_match_left[trigger]
    }
    
    ## cardinality = 0..1
    ### Flags automatically assigned to each created artifact of this type.
    flags = {
        ## cardinality = 0..inf
        set_value[artifact_flag]
    }

    ## cardinality = 0..1
    ### If no, can only have a single artifact of this type in a character's inventory. Defaults to "yes".
    stacking = bool

    ## cardinality = 0..1
    ### If yes, destroy_artifact has no effect on this artifact. Defaults to "no".
    indestructible = bool
    
    ### 118x118px picture; also uses this value plus "_small" (59x59px)
    picture = value[gfx_resource]

    ## cardinality = 0..1
    ### Associated slot to equip the artifact.
    slot = value[artifact_slot]

    ## cardinality = 0..1
    ## replace_scope = { this = character root = character }
    ### Conditions for the artifact_can_be_gifted_to trigger.
    allowed_gift = {
        ## cardinality = 0..inf
        alias_name[trigger] = alias_match_left[trigger]
    }
}