types = {
    type[game_rule] = {
        path_strict = yes
        path = "game/common/game_rules"

        localisation = {
            name = name
            ## optional
            group = group
        }
    }
    type[game_rule_option] = {
        path_strict = yes
        path = "game/common/game_rules"
        skip_root_key = any

        name_field = name

        localisation = {
            name = text
            description = desc
        }
    }
}

game_rule = {
    ### The option's name.
    name = localisation

    ## cardinality = 1..inf
    ### The option's group or groups for filtering.
    group = localisation

    # TODO: change to game_rule_option specific to that rule
    ## cardinality = 0..1
    ### If set, the game rule will default to that option when using an alternate start.
    alt_start_default = <game_rule_option>

    ## cardinality = 0..1
    ### If set, the rule will only appear if that dlc is enabled.
    dlc = enum[dlcs]

    ## cardinality = 2..inf
    <game_rule_option> = {
        ### The option's name for referring to via has_game_rule.
        name = scalar

        ### The option's name.
        text = localisation

        ### The option's description.
        desc = localisation

        ## cardinality = 0..1
        ### If no, achievements can't be earned with this option active. Defaults to "yes".
        achievements = bool

        ## cardinality = 0..1
        ### If no, achievements can't be earned with this option active in an alternate start. Defaults to "yes".
        alt_start_achievements = bool
    }
}