single_alias[general_decisions] = {
    ## cardinality = 0..1
    ### Will show an alert once decision is enabled
    is_high_prio = bool

    ## cardinality = 0..1
    ### Determines how seldom the AI checks whether they can and should do the decision, in months. Defult is 1(every month).
    ai_check_interval = int

    alias_name[decision_pre_trigger] = alias_match_left[decision_pre_trigger]
    
    ### Conditions for the decision to appear
    potential = {
        alias_name[trigger] = alias_match_left[trigger]
    }

    ### Conditions for the decision to be enabled
    allow = {
        alias_name[trigger] = alias_match_left[trigger]
    }

    effect = {
        alias_name[effect] = alias_match_left[effect]
    }

    ### Commands executed when taking the decision
    revoke_allowed = {
        alias_name[trigger] = alias_match_left[trigger]
    }

    # TODO: check all this which factors are needed
    ### Factors for an AI character to take the decision (1 = 100% chance)
    ai_will_do = {
        factor = float

        alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
    }
}

single_alias[filtered_decisions] = {
    ## cardinality = 0..1
    ### Will show an alert once decision is enabled
    is_high_prio = bool

    ## cardinality = 0..1
    ### Determines how seldom the AI checks whether they can and should do the decision, in months. Defult is 1(every month).
    ai_check_interval = int

    filter = enum[filter_targets]
    ai_target_filter = enum[filter_targets]

    alias_name[decision_pre_trigger] = alias_match_left[decision_pre_trigger]
    
    ## cardinality = 0..1
    ### Conditions on the decision taker for the decision to appear. Not taken into account when filter = self, use potential instead.
    from_potential = {
        alias_name[trigger] = alias_match_left[trigger]
    }

    ### Conditions for the decision to appear
    potential = {
        alias_name[trigger] = alias_match_left[trigger]
    }

    ## cardinality = 0..1
    ### Conditions for the decision to be enabled
    allow = {
        alias_name[trigger] = alias_match_left[trigger]
    }

    effect = {
        alias_name[effect] = alias_match_left[effect]
    }

    ### Commands executed when taking the decision
    revoke_allowed = {
        alias_name[trigger] = alias_match_left[trigger]
    }

    # TODO: check all this which factors are needed
    ### Factors for an AI character to take the decision (1 = 100% chance)
    ai_will_do = {
        factor = float

        alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]
    }
}

# TODO: Docs for all

###
# scope = character
alias[decision_pre_trigger:only_playable] = bool

### 
# scope = character
alias[decision_pre_trigger:only_rulers] = bool

### 
# scope = character
alias[decision_pre_trigger:only_independent] = bool

###
# scope = character
alias[decision_pre_trigger:is_in_society] = bool

###
# scope = character
alias[decision_pre_trigger:ai] = bool
