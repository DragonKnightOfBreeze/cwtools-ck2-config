single_alias[general_decisions] = {
    ## cardinality = 0..1
    ### Will show an alert once decision is enabled
    is_high_prio = bool

    ## cardinality = 0..1
    ### Determines how seldom the AI checks whether they can and should do the decision, in months. Defult is 1(every month).
    ai_check_interval = int

    alias_name[decision_pre_trigger] = alias_match_left[decision_pre_trigger]
    
    ### Conditions for the decision to appear
    potential = single_alias_right[general_triggers]

    ### Conditions for the decision to be enabled
    allow = single_alias_right[general_triggers]

    effect = single_alias_right[general_effects]

    ### Commands executed when taking the decision
    revoke_allowed = single_alias_right[general_triggers]

    ### Factors for an AI character to take the decision (1 = 100% chance)
    ai_will_do = single_alias_right[general_decision_ai_will_do]
}

single_alias[filtered_decisions] = {
    ## cardinality = 0..1
    ### Will show an alert once decision is enabled
    is_high_prio = bool

    ## cardinality = 0..1
    ### Determines how seldom the AI checks whether they can and should do the decision, in months. Defult is 1(every month).
    ai_check_interval = int

    filter = enum[filter_targets_character]
    ai_target_filter = enum[filter_targets_character]

    alias_name[decision_pre_trigger] = alias_match_left[decision_pre_trigger]
    
    ## cardinality = 0..1
    ### Conditions on the decision taker for the decision to appear. Not taken into account when filter = self, use potential instead.
    from_potential = single_alias_right[general_triggers]

    ### Conditions for the decision to appear
    potential = single_alias_right[general_triggers]

    ## cardinality = 0..1
    ### Conditions for the decision to be enabled
    allow = single_alias_right[general_triggers]

    effect = single_alias_right[general_effects]

    ### Commands executed when taking the decision
    revoke_allowed = single_alias_right[general_triggers]

    ### Factors for an AI character to take the decision (1 = 100% chance)
    ai_will_do = single_alias_right[general_decision_ai_will_do]

    # TODO: ai_accceptance
}

single_alias[filtered_decisions_settlements] = {
    ## cardinality = 0..1
    ### Will show an alert once decision is enabled
    is_high_prio = bool

    ## cardinality = 0..1
    ### Determines how seldom the AI checks whether they can and should do the decision, in months. Defult is 1(every month).
    ai_check_interval = int

    filter = enum[filter_targets_settlements]
    ai_target_filter = enum[filter_targets_settlements]

    alias_name[decision_pre_trigger] = alias_match_left[decision_pre_trigger]
    
    ## cardinality = 0..1
    ### Conditions on the decision taker for the decision to appear. Not taken into account when filter = self, use potential instead.
    from_potential = single_alias_right[general_triggers]

    ### Conditions for the decision to appear
    potential = single_alias_right[general_triggers]

    ## cardinality = 0..1
    ### Conditions for the decision to be enabled
    allow = single_alias_right[general_triggers]

    effect = single_alias_right[general_effects]

    ### Commands executed when taking the decision
    revoke_allowed = single_alias_right[general_triggers]

    ### Factors for an AI character to take the decision (1 = 100% chance)
    ai_will_do = single_alias_right[general_decision_ai_will_do]
}

single_alias[filtered_decisions_titles] = {
    ## cardinality = 0..1
    ### Will show an alert once decision is enabled
    is_high_prio = bool

    ## cardinality = 0..1
    ### Determines how seldom the AI checks whether they can and should do the decision, in months. Defult is 1(every month).
    ai_check_interval = int

    filter = enum[filter_targets_titles]
    ai_target_filter = enum[filter_targets_titles]

    alias_name[decision_pre_trigger] = alias_match_left[decision_pre_trigger]
    
    ## cardinality = 0..1
    ### Conditions on the decision taker for the decision to appear. Not taken into account when filter = self, use potential instead.
    from_potential = single_alias_right[general_triggers]

    ### Conditions for the decision to appear
    potential = single_alias_right[general_triggers]

    ## cardinality = 0..1
    ### Conditions for the decision to be enabled
    allow = single_alias_right[general_triggers]

    effect = single_alias_right[general_effects]

    ### Commands executed when taking the decision
    revoke_allowed = single_alias_right[general_triggers]

    ### Factors for an AI character to take the decision (1 = 100% chance)
    ai_will_do = single_alias_right[general_decision_ai_will_do]
}

single_alias[from_potential_decisions] = {
    ## cardinality = 0..1
    ### Will show an alert once decision is enabled
    is_high_prio = bool

    ## cardinality = 0..1
    ### Determines how seldom the AI checks whether they can and should do the decision, in months. Defult is 1(every month).
    ai_check_interval = int

    alias_name[decision_pre_trigger] = alias_match_left[decision_pre_trigger]
        
    ## cardinality = 0..1
    ### Conditions on the decision taker for the decision to appear. Not taken into account when filter = self, use potential instead.
    from_potential = single_alias_right[general_triggers]

    ### Conditions for the decision to appear
    potential = single_alias_right[general_triggers]

    ## cardinality = 0..1
    ### Conditions for the decision to be enabled
    allow = single_alias_right[general_triggers]

    effect = single_alias_right[general_effects]

    ### Commands executed when taking the decision
    revoke_allowed = single_alias_right[general_triggers]

    ### Factors for an AI character to take the decision (1 = 100% chance)
    ai_will_do = single_alias_right[general_decision_ai_will_do]
}

single_alias[general_offmap_decisions] = {
    button_name = TODO

    ## cardinality = 0..1
    ### Will show an alert once decision is enabled
    is_high_prio = bool

    ## cardinality = 0..1
    ### Determines how seldom the AI checks whether they can and should do the decision, in months. Defult is 1(every month).
    ai_check_interval = int

    alias_name[decision_pre_trigger] = alias_match_left[decision_pre_trigger]
    
    ### Conditions for the decision to appear
    potential = single_alias_right[general_triggers]

    ### Conditions for the decision to be enabled
    allow = single_alias_right[general_triggers]

    effect = single_alias_right[general_effects]

    ### Commands executed when taking the decision
    revoke_allowed = single_alias_right[general_triggers]

    ### Factors for an AI character to take the decision (1 = 100% chance)
    ai_will_do = single_alias_right[general_decision_ai_will_do]
}

# TODO: Docs for all

###
# scope = character
alias[decision_pre_trigger:only_playable] = bool

### 
# scope = character
alias[decision_pre_trigger:only_rulers] = bool

### 
# scope = character
alias[decision_pre_trigger:only_independent] = bool

###
# scope = character
alias[decision_pre_trigger:is_in_society] = bool

###
# scope = character
alias[decision_pre_trigger:ai] = bool
