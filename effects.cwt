# TODO: possibly scope[offmap]?
# TODO: <offmap_dislike> matching the <offmap>.
## scope = any
### Sets the dislike of the specified offmap power to the specified type.
alias[effect:set_offmap_dislike] = {
    offmap = <offmap>
    type = <offmap_dislike>
}

# TODO: possibly scope[offmap]?
## scope = any
### Sets the dislike of the specified offmap power to a random type available to it.
alias[effect:set_offmap_dislike] = {
    offmap = <offmap>
    type = random
}

# TODO: possibly scope[offmap]?
# TODO: <offmap_like> matching the <offmap>.
## scope = any
### Sets the dislike of the specified offmap power to the specified type.
alias[effect:set_offmap_like] = {
    offmap = <offmap>
    type = <offmap_like>
}

TODO: possibly scope[offmap]?
## scope = any
### Sets the dislike of the specified offmap power to a random type available to it.
alias[effect:set_offmap_like] = {
    offmap = <offmap>
    type = random
}

## scope = any
### Activate a disease, which can now randomly appear. Note that there's no way to deactivate a disease.
alias[effect:activate_disease] = <disease>

# TODO: possibly scope[title]?
## scope = any
### Activate/deactivate a titular or de jure landed title. Unlike destroyed titles (destroy_landed_title), deactivated titles cannot be re-created by the player or AI, except through special decisions.
alias[effect:activate_title] = {
    title = <title>
    status = bool
}

## scope = any
### Deletes a previously saved variable.
alias[effect:clear_event_target] = var

## scope = any
### Deletes a previously saved global variable.
alias[effect:clear_global_event_target] = value[global_variable]

## scope = any
### Deletes all previously saved global variables.
alias[effect:clear_global_event_targets] = yes

## scope = any
### Clears a previously set global flag.
alias[effect:clr_global_flag] = value[global_flag]

# TODO: possibly scope[religion]?
## scope = any
### Enables prepared invasions for that religion (the allow_viking_invasion property). Also see disable_prepared_invasion.
alias[effect:enable_prepared_invasion] = <religion>

## scope = any
### Logs the given string for debug purposes into game.log. Localisation commands can be used normally in the string. Can even be used within event triggers and other places that normally only accept conditionals, such as if limit. Only logs if the game is started with the "-scriptlog" parameter.
alias[effect:log] = scalar

## scope = any
### Logs a list of all event targets set, and what each scope corresponds to into game.log. Only logs if the game is started with the "-scriptlog" parameter.
alias[effect:log_scopes] = yes

# TODO: see if additive modifiers work
## scope = any
### An effect that might execute or not based on random chance.
alias[effect:random] = {
    ### Basic chance is equal to [value]%.
    chance = int

    ## cardinality = 0..inf
    alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]

    ## cardinality = 1..inf
    alias_name[effect] = alias_match_left[effect]
}

# TODO: see if additive modifiers work
## scope = any
### A list of different effects, one of which will be selected to execute based on each entry's weight (left hand side).
alias[effect:random_list] = {
    ## cardinality = 2..inf
    int = {
        ## cardinality = 0..inf
        alias_name[multiplicative_modifier] = alias_match_left[multiplicative_modifier]

        ## cardinality = 1..inf
        alias_name[effect] = alias_match_left[effect]
    }
}

# TODO: check scope
## scope = any
### Recalculates the succession.
alias[effect:recalc_succession] = yes

# TODO: make different versions for different events, because character_event and province_event are different and scopes and stuff
## scope = any
### Fires an event, without modifying the event chain (i.e ROOT and FROM remain unchanged). Note that it will fire the event whose id is specified, and not necessarily the current event again. See event modding.
alias[effect:repeat_event] = {
    ### id of the event to fire.
    id = <event>

    ## cardinality = 0..1
    ### Base number of days to wait before firing the event. If not specified (or 0), event occurs instantly.
    days = int

    ## cardinality = 0..1
    ### Number of days to add randomly for the event occurrence date, closed-ended (days to days+random).
    random = int

    ## cardinality = 0..1
    ### Localisation key to show as tooltip. If not specified, uses the DEFAULT_SENDEVENT_EVENTOPTION_TOOLTIP key ("Character receives an event").
    tooltip = localisation
}

## scope = any
### Saves a scope into a variable, to be re-used later in an event chain
alias[effect:save_event_target_as] = TODO

## scope = any
### Saves a scope into a global variable, to be re-used later
alias[effect:save_global_event_target_as] = TODO

## scope = any
### Creates a global flag.
alias[effect:set_global_flag] = value_set[global_flag]

# TODO: possibly scope[religion]?
## scope = any
### Religion becomes a heresy of new parent religion.
alias[effect:set_parent_religion] = {
    religion = <religion>
    parent = <religion>
}

## scope = any
### Plays the specified sound, as defined in interface/sound.sfx
alias[effect:sound_effect] = TODO

## scope = any
### Forces an outbreak, but follows the scenarios set up in the disease.txt file.
alias[effect:start_outbreak] = <disease>

# TODO: implement validation
## scope = any
### Based on the evaluation of a simple (non-clause right-hand side) trigger, selects up to one of the results to happen.
alias[effect:trigger_switch] = {
    ### The LHS trigger to check.
    on_trigger = alias_name[trigger]

    ## cardinality = 1..inf
    ### The RHS option.
    scalar = {
        ## cardinality = 1..inf
        alias_name[effect] = alias_match_left[effect]
    }

    ## cardinality = 0..1
    ### The option to pick if none of the previous options match.
    fallback = {
        ## cardinality = 1..inf
        alias_name[effect] = alias_match_left[effect]
    }
}

## scope = any
### Bypasses some error-checking in destroy title, allowing to destroy landless titles. Warning: use this effect with care!
alias[effect:unsafe_destroy_landed_title] = scope[title]

## scope = any with flags
### Clears the given flag from the current scope. Works for any scope that can store flags, unlike the more specific clr_scope_flag commands.
alias[effect:clr_flag] = TODO

## scope = any with flags
### Sets a flag in the current scope if it can store flags. Works for any such scope, unlike the more specific set_scope_flag commands.
alias[effect:set_flag] = TODO

## scope = artifact
### Clears a flag in the currently scoped artifact.
alias[effect:clr_artifact_flag] = value[artifact_flag]

## scope = artifact
### Copies the artifact history from the given artifact to the scoped artifact.
alias[effect:copy_artifact_history] = scope[artifact]

## scope = artifact
### Sets a flag in the currently scoped artifact.
alias[effect:set_artifact_flag] = value_set[artifact_flag]

## scope = artifact
### Sets the original owner of the artifact.
alias[effect:set_artifact_original_owner] = scope[character]

## scope = artifact
### Changes the original owner of an artifact.
alias[effect:set_original_owner] = scope[character]

## scope = artifact
### Transfers the artifact from one character to another. If from does not have the artifact, it will not be transferred.
alias[effect:transfer_artifact] = {
    from = scope[character]
    to = scope[character]
}

## scope = artifact
### Resets the description of the scoped to artifact.
alias[effect:set_description] = ""

## scope = artifact
### Changes the description of the scoped to artifact to the given localisation key. All custom localisation is resolved when set, so the description will not change once set.
alias[effect:set_description] = localisation

## scope = artifact
### Changes the description of the scoped to artifact to the given string. All custom localisation is resolved when set, so the description will not change once set.
alias[effect:set_description] = scalar

## scope = bloodline
### Resets the description of the scoped to bloodline.
alias[effect:set_description] = ""

## scope = bloodline
### Changes the description of the scoped to bloodline to the given localisation key. All custom localisation is resolved when set, so the description will not change once set.
alias[effect:set_description] = localisation

## scope = bloodline
### Changes the description of the scoped to bloodline to the given string. All custom localisation is resolved when set, so the description will not change once set.
alias[effect:set_description] = scalar

## scope = artifact
### Destroys the artifact, even if indestructible.
alias[effect:unsafe_destroy_artifact] = yes

# TODO see if scope[artifact] works
## scope = any
### Destroys the artifact, even if indestructible.
alias[effect:unsafe_destroy_artifact] = <artifact>

# TODO Confirm it works that way
## scope = unit
### Changes the current tactic of the unit. Totally ignores the triggers or phases. If the tactic has a phase change part then that part will be acknowledged however.
alias[effect:set_flank_tactic] = <combat_tactic>

## scope = bloodline
### Add the specified character to the scoped bloodline
alias[effect:add_bloodline_member] = scope[character]

## scope = bloodline
### Removes a script flag from the scoped bloodline
alias[effect:clr_bloodline_flag] = value[bloodline_flag]

## scope = bloodline
### Removed the scoped bloodline from the game.
alias[effect:destroy_bloodline] = yes

## scope = bloodline
### Remove the specified character from the scoped bloodline.
alias[effect:remove_bloodline_member] = character

## scope = bloodline
### Adds a script flag to the scoped bloodline.
alias[effect:set_bloodline_flag] = value_set[bloodline_flag]

## scope = character
### Abdicate to current heir
alias[effect:abdicate] = yes

# TODO: Figure out what the clause does.
## scope = character
### Abdicate to current heir
alias[effect:abdicate] = {
    move = no
}

## scope = character
### Abdicate to an arbitrary character.
alias[effect:abdicate_to] = scope[character]

# TODO: Figure out
## scope = character
### UNKNOWN
alias[effect:abdicate_to_most_liked_by] = scope[character]

## scope = character
### For plots activated by decision
alias[effect:activate_plot] = yes

## scope = character
### Adds the given value to the age of the scoped character. Warning: messing with a character's age may have unintended side effects so use with caution.
alias[effect:add_age] = int

## scope = character
### Creates an alliance between characters. Also see break_alliance.
alias[effect:add_alliance] = {
    who = scope[character]
    alias_name[duration] = alias_match_left[duration]
}

## scope = character
###
alias[effect:add_ambition] = TODO

## scope = character
### A copy of the named artifact is created and added to the scoped character.
alias[effect:add_artifact] = <artifact>

## scope = character
### Warn: buggy behavior
alias[effect:add_betrothal] = TODO

# TODO: pay attention to the type for name field, might be wrong
# TODO: Also write an alias for "either duration = -1 or days/months/years"
# TODO: docs.
## scope = character
### Adds a character modifier. Specify duration using days, months, years, or duration = -1 (non-expiring). Can use optional fields hidden = yes and stacking = yes.
alias[effect:add_character_modifier] = {
    name = <event_modifier>
    ## cardinality = 0..1
    duration = -1
    ## cardinality = 0..1
    alias_name[duration] = alias_match_left[duration]
    ## cardinality = 0..1
    hidden = bool
    ## cardinality = 0..1
    stacking = bool
}

## scope = character
### Adds the given character as a consort to the scoped character.
alias[effect:add_consort] = scope[character]

## scope = character
### Makes scoped character be owed a favor toward another character. Also see reverse_add_favor.
alias[effect:add_favor] = scope[character]

# TODO: Confirm
## scope = character
### UNCONFIRMED Makes the scoped character a friend of the given character.
alias[effect:add_friend] = scope[character]

# TODO: Confirm
## scope = character
### UNCONFIRMED Makes the scoped character a lover of the given character.
alias[effect:add_lover] = scope[character]

## scope = character
###
alias[effect:add_objective] = TODO

# TODO see if scope[offmap] works
## scope = character
### Adds the specified amount of offmap currency for the specified offmap power to the scoped character. Use a negative number to subtract.
alias[effect:add_offmap_currency] = {
    offmap = <offmap>
    value = int
}

## scope = character
### Adds or subtracts a portion of the scope's population.
alias[effect:add_population_scaled] = float

## scope = character
### Adds an education trait matching specified attribute.
alias[effect:add_random_education_trait] = enum[attributes]

# TODO: see if int is really strictly 1..4
## scope = character
### Adds an education trait matching specified level.
alias[effect:add_random_education_trait] = int[1..4]

# TODO: Confirm
## scope = character
### Adds a random education trait.
alias[effect:add_random_education_trait] = yes

# TODO: Confirm
## scope = character
### UNCONFIRMED Makes the scoped character a rival of the given character. See also remove_rival.
alias[effect:add_rival] = scope[character]

## scope = character
### Adds a timed modifier to the society of scoped character. Works with days and years.
alias[effect:add_society_modifier] = {
    modifier = TODO # waiting for static modifiers
    aliast_name[duration] = alias_match_left[duration]
    # Works with duration, but apparently not months.
    ## cardinality = 0..0
    months = scalar
}

# TODO: Confirm
## scope = character
### UNCONFIRMED Makes the scoped character a spouse of the given character (normal marriage).
alias[effect:add_spouse] = scope[character]

# TODO: Confirm
## scope = character
### UNCONFIRMED Makes the scoped character a spouse of the given character (matrilineal marriage).
alias[effect:add_spouse_matrilineal] = scope[character]

## scope = character
### Add the scoped character to the RHS bloodline. Note that the RHS must be an existing bloodline, not a bloodline type.
alias[effect:add_to_bloodline] = scope[bloodline]

## scope = character
### Adds a trait to the character, using an ID from the traits files. Also see remove_trait.
alias[effect:add_trait] = <trait>

# TODO: Figure out
## scope = character
###
alias[effect:ambition_succeeds] = yes

# TODO: Figure out
## scope = character
###
alias[effect:back_plot] = scope[character]

## scope = character
### Banish character to random court. See also remove_banish.
alias[effect:banish] = yes

# TODO: Possibly scope[religion]?
## scope = character
### All characters of the targeted religion will be banished to random court
alias[effect:banish_religion] = <religion>

## scope = character
### Changes character religion to a random heresy of current religion
alias[effect:become_heretic] = yes

## scope = character
### Changes character religion to a heresy of their current religion, but still openly practices their current faith (i.e., similar to become_heretic, but in secret rather than openly).
alias[effect:become_secret_heretic] = yes

## scope = character
### Remove an alliance. Also see add_alliance
alias[effect:break_alliance] = scope[character]

# TODO: Confirm
## scope = character
### UNCONFIRMED Breaks the betrothal between the scoped character and the target character
alias[effect:break_betrothal] = scope[character]

# TODO: Confirm
## scope = character
### UNCONFIRMED Cancels the current ambition of the scoped character.
alias[effect:cancel_ambition] = yes

# TODO: Figure out
## scope = character
### UNKNOWN
alias[effect:cancel_job_action] = <job_action>

## scope = character
### Outdated, now cancel_objective/cancel_plot
alias[effect:cancel_objective] = TODO

## scope = character
###
alias[effect:cancel_plot] = TODO

## scope = character
### Ends a character's pregnancy instantaneously. Can be called at any time during pregnancy prior to birth. If pregnancy notification is to be avoided, must be called earlier than 2 months pregnancy.
alias[effect:cancel_pregnancy] = yes

## scope = character
### Moves the capital.
alias[effect:capital] = <province>

## scope = character
### Changes base diplomacy stat. Will not decrease base stat below 0.
alias[effect:change_diplomacy] = int

## scope = character
### Changes base martial stat. Will not decrease base stat below 0.
alias[effect:change_martial] = int

## scope = character
### Changes base stewardship stat. Will not decrease base stat below 0.
alias[effect:change_stewardship] = int

## scope = character
### Changes base intrigue stat. Will not decrease base stat below 0.
alias[effect:change_intrigue] = int

## scope = character
### Changes base learning stat. Will not decrease base stat below 0.
alias[effect:change_learning] = int

## scope = character
### Add or remove threat from a character.
alias[effect:change_infamy] = {
    value = float
    ### Key for the localisation entry for the character's threat tooltip.
    localisation = localisation
}

## scope = character
### Add the specified amount of plot power to the plot owned by the scoped character.
alias[effect:change_plot_power] = int

## scope = character
### Changes the currency of the scoped character in their society.
alias[effect:change_society_currency] = int

## scope = character
### Changes the currency of the scoped character in their society, reducing the amount of currency consumed (or given, but is intended for the former) by 70% when the society is at 100% influence, going linearly from 0% at 0%.
alias[effect:change_society_currency] = {
    society = <society>
    value = int
    scaled_by_influence = yes
}

# TODO: See if months works
## scope = character
### Fires an event to scoped character.
alias[effect:character_event] = {
    id = <event.character>

    ## cardinality = 0..1
    ### How many days to delay.
    days = int

    ## cardinality = 0..1
    ### How many years to delay.
    years = int

    ## cardinality = 0..1
    ### Number of days to add randomly for the event occurrence date, closed-ended (days to days+random).
    random = int

    ## cardinality = 0..1
    ### Tooltip for the effect. If not specified, uses the DEFAULT_SENDEVENT_EVENTOPTION_TOOLTIP key ("Character receives an event").
    tooltip = localisation
}

# TODO: Elaborate.
## scope = character
### Records a chronicle entry.
alias[effect:chronicle] = {
    entry = localisation

    ## cardinality = 0..1
    portrait = TODO # localisation as scalar?

    ## cardinality = 0..1
    picture = <gfx_resource>
}

## scope = character
### Removes all opinion modifiers allowing the scoped character to banish the given character. Doesn't clear ongoing reasons like excommunication.
alias[effect:clear_banish_reasons] = scope[character]

## scope = character
### Removes all traits with the education = yes parameter.
alias[effect:clear_education_trait] = yes

## scope = character
### Removes all opinion modifiers allowing the scoped character to execute the given character. Doesn't clear ongoing reasons like excommunication.
alias[effect:clear_execute_reasons] = scope[character]

## scope = character
### Removes the focus of a character. Also see set_focus.
alias[effect:clear_focus] = yes

## scope = character
### Removes all opinion modifiers allowing the scoped character to imprison the given character. Doesn't clear ongoing reasons like excommunication.
alias[effect:clear_prison_reasons] = scope[character]

## scope = character
### Removes all opinion modifiers allowing the scoped character to revoke the given character's titles. Doesn't clear ongoing reasons like excommunication.
alias[effect:clear_revoke_reasons] = scope[character]

## scope = character
### Removes the scoped character's secret religion.
alias[effect:clear_secret_religion] = yes

## scope = character
### Sets wealth of the scoped character to 0.
alias[effect:clear_wealth] = yes

## scope = any
### Sets wealth of the given character to 0.
alias[effect:clear_wealth] = scope[character]

## scope = character
### Clears a previously set flag in the scoped character.
alias[effect:clr_character_flag] = value[character_flag]

## scope = character
### Resets the character's revealed society.
alias[effect:clr_discovered_society] = yes

## scope = character
### Removes any quest with that name belonging to the scoped character, considered a success.
alias[effect:clr_quest] = value[quest]

## scope = character
### Removes any quest with that name (and from that society, if the society name is present) belonging to the scoped character, considered a failure.
alias[effect:clr_quest] = {
    ## cardinality = 0..1
    society = <society>
    id = value[quest]
    failure = yes
}

## scope = character
### Clears the target of the specified quest belonging to the scoped character. Does not clear the quest itself.
alias[effect:clr_quest_target] = value[quest]

## scope = character
### Sets the scoped character's public religion to their secret religion.
alias[effect:convert_to_secret_religion] = yes

## scope = character
### Sets the scoped character's public religion to the given character's secret religion.
alias[effect:convert_to_secret_religion] = scope[character]

# TODO: Confirm
## scope = character
### UNCONFIRMED Copies a random trait with personality = yes from the given character.
alias[effect:copy_random_personality_trait] = scope[character]

# TODO: Probably scope[religion] but we'll see.
## scope = character
### Scoped character founds a new bloodline of the specified type.
alias[effect:create_bloodline] = {
    type = <bloodline>

    ## cardinality = 0..1
    ### Associates the bloodline with a religion, connecting it with the religion view.
    religion = <religion>

    ## cardinality = 0..1
    ### Associates the bloodline with a society, connecting it with the society view.
    society = <society>

    ## cardinality = 0..1
    ### Overrides the base type's inheritance rules.
    inheritance = enum[bloodline_inheritance_types]

    ## cardinality = 0..1
    ### Overrides the base type's bastard rules.
    allow_bastards = bool
}

## scope = character
### Creates the patrician family palace
alias[effect:create_family_palace] = yes

# TODO: Confirm
## scope = character
###
alias[effect:culture_techpoints] = int

# TODO: Confirm
## scope = character
###
alias[effect:cure_illness] = yes

## scope = character
### Kills the scoped character.
alias[effect:death] = {
    death_reason = <death>

    # Cardinality probably depends on can_no_killer of the death reason?
    ## cardinality = 0..1
    killer = scope[character]
}

# TODO: Confirm
## scope = character
### UNCONFIRMED Changes the scoped character's decadence by this amount.
alias[effect:decadence] = int

## scope = character
### Also see approve_law.
alias[effect:decline_law] = TODO

## scope = character
### Destroys the tradepost in the given province.
alias[effect:destroy_tradepost] = scope[province]

# TODO: Figure out
## scope = character
###
alias[effect:diplomatic_immunity] = yes

# TODO: possibly scope[religion]?
## scope = any
### Disables prepared invasions for that religion (the allow_viking_invasion property). Also see enable_prepared_invasion.
alias[effect:disable_prepared_invasion] = <religion>

## scope = character
### Disbands the levies previously created with the given earmark via spawn_unit = { earmark = xxx }
alias[effect:disband_event_forces] = value[earmark]

## scope = character
### Sets the dynasty of scoped character. May need to been chained with recalc_succession command, if impacting succession. Use dynasty = father_bastard to generate a cadet dynasty, dynasty = mother_bastard to create a bastard dynasty, or dynasty = none to make the character Lowborn. Special values used in character creation (""random"", ""culture"", and ""actually_culture"") do not work here. When setting character dynasty in an event it only works inside of an immediate = { } block.
alias[effect:dynasty] = TODO

# TODO: Confirm
## scope = character
###
alias[effect:economy_techpoints] = int

# TODO: Confirm
## scope = character
###
alias[effect:embargo] = scope[character]

# TODO: Confirm - bool or yes?
## scope = character
###
alias[effect:excommunicate] = yes

## scope = character
###
alias[effect:faction] = TODO

# TODO: Confirm
## scope = character
###
alias[effect:fertility] = float

## scope = character
### Similar to move_character, but it bypasses the checks and forces the character to move. Should not be used lightly.
alias[effect:force_host] = scope[character]

# TODO: Confirm
## scope = character
###
alias[effect:gain_all_occupied_titles] = scope[character]

# TODO: Confirm scopes and whatever this does anyway
## scope = character
### Note: Does not work with "any_" scopes.
alias[effect:gain_settlements_under_title] = {
    title = scope[title]
    enemy = scope[character]
}

# TODO: Confirm
## scope = character
###
alias[effect:give_job_title] = <minor_title.job>

# TODO: Confirm
## scope = character
###
alias[effect:give_minor_title] = <minor_title>

## scope = character
### gives the character a nickname.
alias[effect:give_nickname] = <nickname>

# TODO: Confirm
## scope = character
###
alias[effect:health] = float

# TODO: Confirm
## scope = character
### For merchant republics.
alias[effect:hold_election] = yes

## scope = character
### Scope gets impregnated by the character.
alias[effect:impregnate] = scope[character]

## scope = character
### Scope gets impregnated with no specified father.
alias[effect:impregnate] = 0

## scope = character
###
alias[effect:impregnate_cuckoo] = TODO

## scope = character
### Scoped character will be imprisoned by target. Identical to the "prisoner" command.
alias[effect:imprison] = scope[character]

# TODO: Confirm it's "current" and not "correct" (original)
## scope = character
### Scoped character will be imprisoned in the current location. Identical to the "prisoner" command.
alias[effect:imprison] = yes

## scope = character
### Scoped character will be released from prison. Identical to the "prisoner" command.
alias[effect:imprison] = no

## scope = character
### Scoped character will inherit titles of target character.
alias[effect:inherit] = scope[character]

# TODO: Confirm
## scope = character
###
alias[effect:join_attacker_wars] = scope[character]

# TODO: Confirm
## scope = character
### Only joins one war. Cannot be used by (feudal?) vassals to join liege's war.
alias[effect:join_defender_wars] = scope[character]

## scope = character
### Joins the faction led by the faction leader, if it exists. Also supports the optional argument
alias[effect:join_faction] = TODO

## scope = character
### Joins the specified society.
alias[effect:join_society] = <society>

## scope = character
###
alias[effect:leave_faction] = TODO

# TODO: Confirm
## scope = character
###
alias[effect:leave_plot] = scope[character]

## scope = character
### Makes the scoped character leave the society they are currently part of.
alias[effect:leave_society] = yes

## scope = character
### Fires an event to scoped character.
alias[effect:letter_event] = {
    id = <event.letter>

    ## cardinality = 0..1
    ### How many days to delay.
    days = int

    ## cardinality = 0..1
    ### How many years to delay.
    years = int

    ## cardinality = 0..1
    ### Number of days to add randomly for the event occurrence date, closed-ended (days to days+random).
    random = int

    ## cardinality = 0..1
    ### Tooltip for the effect. If not specified, uses the DEFAULT_SENDEVENT_EVENTOPTION_TOOLTIP key ("Character receives an event").
    tooltip = localisation
}

## scope = character
### The scoped character will become primary spouse.
alias[effect:make_primary_spouse] = yes

## scope = character
### The scoped character will become a suzerain to "who".
alias[effect:make_tributary] = {
    ### This will become the tributary.
    who = scope[character]

    ## cardinality = 0..1
    ### What percentage of tribute the tributary type pays to their liege. Defaults to the tributary_type's values.
    percentage = float

    ## cardinality = 0..1
    ### Determines the suzerain-tributary relationship type. Defaults to "default".
    tributary_type = <tributary_type>
}

## scope = character
### Increase/decrease manpower.
alias[effect:manpower] = int

# TODO: Confirm
## scope = character
###
alias[effect:military_techpoints] = int

## scope = character
### The scoped character will be moved to targeted characters court
alias[effect:move_character] = scope[character]

## scope = character
### Fires an event to scoped character.
alias[effect:narrative_event] = {
    id = <event.narrative>

    ## cardinality = 0..1
    ### How many days to delay.
    days = int

    ## cardinality = 0..1
    ### How many years to delay.
    years = int

    ## cardinality = 0..1
    ### Number of days to add randomly for the event occurrence date, closed-ended (days to days+random).
    random = int

    ## cardinality = 0..1
    ### Tooltip for the effect. If not specified, uses the DEFAULT_SENDEVENT_EVENTOPTION_TOOLTIP key ("Character receives an event").
    tooltip = localisation
}

# TODO: Confirm
## scope = character
###
alias[effect:occupy_minors_of_occupied_settlements] = scope[character]

## scope = character
### Adds an opinion modifier to the scoped character towards "who".
alias[effect:opinion] = {
    modifier = <opinion_modifier>

    who = scope[character]

    ## cardinality = 0..1
    ### Can be used to customise localisation that appears in the tooltip.
    origin_description = localisation

    ## cardinality = 0..1
    ### Overrides the default duration of the opinion modifier.
    alias_name[duration_my] = alias_match_left[duration_my]
}

# TODO: Confirm
## scope = character
###
alias[effect:participation_scaled_decadence] = float

# TODO: Confirm
## scope = character
###
alias[effect:participation_scaled_piety] = float

# TODO: Confirm
## scope = character
###
alias[effect:participation_scaled_prestige] = float

## scope = character
### Adds the given amount of piety to the character.
alias[effect:piety] = int

## scope = character
### Tells the plot system to end the plot and fire the effect block. Note that it doesn't cause a plot to succeed, it should be used when a plot has already succeeded (successcondition block).
alias[effect:plot_succeeds] = yes

# TODO: Confirm
## scope = character
###
alias[effect:population] = int

## scope = character
### Removes a character modifier
alias[effect:remove_character_modifier] = TODO

## scope = character
### Removes a number of instances of a character modifier (usually a stackable one).
alias[effect:remove_character_modifiers] = TODO

## scope = character
### Removes the consort/concubine relationship between the scoped and the given characters. Works in either scope.
alias[effect:remove_consort] = scope[character]

## scope = character
### Target character no longer owes a favor to the scoped character. Also see reverse_remove_favor.
alias[effect:remove_favor] = scope[character]

## scope = character
### Removes a friend relationship between the scoped and the given characters.
alias[effect:remove_friend] = scope[character]

## scope = character
### Remove the scoped character from the specified bloodline.
alias[effect:remove_from_bloodline] = scope[bloodline]

## scope = character
### Remove scoped character's guardian.
alias[effect:remove_guardian] = scope[character]

## scope = character
### Remove scoped character's lover.
alias[effect:remove_lover] = scope[character]

## scope = character
### Remove character's nickname.
alias[effect:remove_nickname] = yes

## scope = character
### Remove character's nickname if it is the given one.
alias[effect:remove_nickname] = <nickname>

## scope = character
### Removes an opinion modifier towards "who" from scoped character.
alias[effect:remove_opinion] = {
    who = scope[character]
    modifier = <opinion_modifier>
}

## scope = character
### Makes the scoped character no longer rival of the given character. See also add_rival.
alias[effect:remove_rival] = scope[character]

## scope = character
### Removes special title from scoped character. See also set_special_character_title.
alias[effect:remove_special_character_title] = localisation

## scope = character
### Remove scoped character's spouse.
alias[effect:remove_spouse] = yes

## scope = character
### Remove the scoped character's spouse that matches the given character.
alias[effect:remove_spouse] = scope[character]

## scope = character
### Remove minor title.
alias[effect:remove_title] = <minor_title>

## scope = character
### Removes a trait, also see add_trait.
alias[effect:remove_trait] = <trait>

## scope = character
### Stops the scoped character from being a tributary to the given character.
alias[effect:remove_tributary] = scope[character]

## scope = character
### Reveals the scoped character's plot.
alias[effect:reveal_plot] = yes

## scope = character
### Reveals the scoped character's plot to the given character.
alias[effect:reveal_plot] = scope[character]

# TODO: Figure out
## scope = character
### reveal scoped characters plot
alias[effect:reveal_plot_w_message] = yes

## scope = character
### Makes scoped character owe a favor to the given character. Also see add_favor.
alias[effect:reverse_add_favor] = scope[character]

# TODO confirm actual behaviour - where do they actually go, ect.
## scope = character
### Bring scoped character back into court. See also banish.
alias[effect:reverse_banish] = scope[character]

## scope = character
### The given character will be imprisoned by the scoped character
alias[effect:reverse_imprison] = scope[character]

## scope = character
### Adds an opinion modifier to "who" towards scoped character.
alias[effect:reverse_opinion] = {
    modifier = <opinion_modifier>

    who = scope[character]

    ## cardinality = 0..1
    ### Can be used to customise localisation that appears in the tooltip.
    origin_description = localisation

    ## cardinality = 0..1
    ### Overrides the default duration of the opinion modifier.
    alias_name[duration_my] = alias_match_left[duration_my]
}

## scope = character
### Scoped character no longer owes a favor to the given character. Also see remove_favor.
alias[effect:reverse_remove_favor] = scope[character]

## scope = character
### Removes an opinion modifier towards scoped character from "who".
alias[effect:reverse_remove_opinion] = {
    who = scope[character]
    modifier = <opinion_modifier>
}

# TODO update for thirdparty stuff when I do that
## scope = character
### Initiate a war; target is the attacker, the scoped character is the defender. Doesn't check if the casus belli can be used.
alias[effect:reverse_unsafe_war] = {
    target = scope[character]
    casus_belli = <casus_belli>
    ## cardinality = 0..1
    thirdparty = scope[character]
    ## cardinality = 0..1
    ### Overrides the resulting threat value.
    infamy = int # TODO: is it really int?
}

## scope = character
### Modifies piety by percentage (1.0 = 100%) of annual piety increase.
alias[effect:scaled_piety] = float

## scope = character
### Modifies piety by value percentage (1.0 = 100%) of annual piety increase. min increases final cost to min if result would be lower. max reduces the final cost to max if result would be lower.
alias[effect:scaled_piety] = {
    value = float
    ## cardinality = 0..1
    min = int
    ## cardinality = 0..1
    max = int
}

## scope = character
### Modifies prestige by percentage (1.0 = 100%) of annual prestige increase.
alias[effect:scaled_prestige] = float

## scope = character
### Modifies prestige by value percentage (1.0 = 100%) of annual prestige increase. min increases final cost to min if result would be lower. max reduces the final cost to max if result would be lower.
alias[effect:scaled_prestige] = {
    value = float
    ## cardinality = 0..1
    min = int
    ## cardinality = 0..1
    max = int
}

## scope = character
### Modifies wealth by percentage (1.0 = 100%) of annual wealth increase.
alias[effect:scaled_wealth] = float

## scope = character
### Modifies wealth by value percentage (1.0 = 100%) of annual wealth increase. min increases final cost to min if result would be lower. max reduces the final cost to max if result would be lower.
alias[effect:scaled_wealth] = {
    value = float
    ## cardinality = 0..1
    min = int
    ## cardinality = 0..1
    max = int
}

# TODO: Figure out
## scope = character
###
alias[effect:send_assassin] = scope[character]

## scope = character
### Sets a flag in the scoped character.
alias[effect:set_character_flag] = value_set[character_flag]

# TODO: Figure out
## scope = character
###
alias[effect:set_defacto_vassal] = scope[character]

# TODO: Figure out
## scope = character
###
alias[effect:set_defacto_vassal] = scope[title]

## scope = character
### Sets the character to be revealed to be part of their secret society.
alias[effect:set_discovered_society] = yes

## scope = character
### Sets the character to be "revealed" to be part of the given society.
alias[effect:set_discovered_society] = scope[society]

## scope = character
### Sets a flag in the scoped character's dynasty.
alias[effect:set_dynasty_flag] = value_set[dynasty_flag]

## scope = character
### Change the father of a character.
alias[effect:set_father] = scope[character]

## scope = character
### Remove the father of a character.
alias[effect:set_father] = 0

## scope = character
### Sets the focus of a character.
alias[effect:set_focus] = <objective.focus>

## scope = character
### Sets the scoped character's gender to be male. Warning: messing with a character's gender may have unintended side effects so use with caution.
alias[effect:set_gender] = male

## scope = character
### Sets the scoped character's gender to be female. Warning: messing with a character's gender may have unintended side effects so use with caution.
alias[effect:set_gender] = female

## scope = character
### Sets the scoped character's gender to be the opposite of what they currently are. Warning: messing with a character's gender may have unintended side effects so use with caution.
alias[effect:set_gender] = opposite

## scope = character
### Change the government type of the scoped character.
alias[effect:set_government_type] = <government>

## scope = character
### Sets the ethnicity of the scoped character, based on the default graphical_culture of a culture, or of the culture of another character or province.
alias[effect:set_graphical_culture] = scope[culture]

# TODO: Confirm
## scope = character
###
alias[effect:set_guardian] = scope[character]

## scope = character
### Sets a character as important. They will neither be removed from AI courts nor be deleted from the saved game to reduce file size. WARNING: This cannot be reversed.
alias[effect:set_immune_to_pruning] = yes

## scope = character
### Make a character interested in joining the specified society.
alias[effect:set_interested_society] = scope[society]

# TODO: Confirm. I suspect where is optional based on whether the job action is landless or not, but *shrug*
## scope = character
### Update the current job of a councillor.
alias[effect:set_job_action] = {
    action = <job_action>
    where = scope[province]
}

## scope = character
### Change the mother of a character.
alias[effect:set_father] = scope[character]

# TODO: Confirm. Actually copied from mother, dunno if 0 works.
## scope = character
### Remove the mother of a character.
alias[effect:set_father] = 0

## scope = character
### Sets the scoped character's total amount of offmap currency for the specified offmap power to the value.
alias[effect:set_offmap_currency] = {
    offmap = scope[offmap]
    value = int
}

# TODO: Figure out
## scope = character
###
alias[effect:set_opinion_levy_raised_days] = {
    who = scope[character]
    days = int
}

## scope = character
### The player controlling the scoped character starts controlling the given character instead. Does not enforce remaining within the same dynasty, but chronicle will be lost if dynasty changes. WARNING: It's possible to cause game overs with this so use with care.
alias[effect:set_player_character] = scope[character]

## scope = character
### Creates a quest for the scoped character.
alias[effect:set_quest] = value_set[quest]

## scope = character
### Creates a quest with the given society for the scoped character.
alias[effect:set_quest] = {
    id = value_set[quest]
    society = scope[society]
}

## scope = character
### When a child is denounced (no official father), real_father is used to keep track of it.
alias[effect:set_real_father] = scope[character]

# TODO: Figure out
## scope = character
###
alias[effect:set_reincarnation] = scope[character]

# TODO: Figure out
## scope = character
###
alias[effect:set_reincarnation] = 0

## scope = character
### Sets the secret religion of the character to the right-hand-side (defaulting to secret religion, if applicable).
alias[effect:set_secret_religion] = scope[religion]

## scope = character
### Sets the secret religion of the character to the right-hand-side, using the specified visibility religion of the target.
alias[effect:set_secret_religion] = {
    target_type = enum[religion_visibility]
    target = scope[religion]
}

## scope = character
### Set or unset the scoped character as the grandmaster of their society.
alias[effect:set_society_grandmaster] = yes

## scope = character
### Unset the scoped character as the grandmaster of their society.
alias[effect:set_society_grandmaster] = no

## scope = character
### Add special title to scoped character. See also remove_special_character_title.
alias[effect:set_special_character_title] = localisation

# TODO: See if other durations work
## scope = character
### Gives a temporary truce to the scoped character towards "who".
alias[effect:set_truce] = {
    who = scope[character]
    years = int
}

## scope = character
### Ranks the scoped character down by the specified number of ranks in their current society.
alias[effect:society_rank_down] = int

## scope = character
### Ranks the scoped character down by the specified number of ranks in the given society.
alias[effect:society_rank_down] = {
    society = scope[society]
    rank = int
}

## scope = character
### Ranks the scoped character up by the specified number of ranks in their current society.
alias[effect:society_rank_up] = int

## scope = character
### Ranks the scoped character up by the specified number of ranks in the given society.
alias[effect:society_rank_up] = {
    society = scope[society]
    rank = int
}

# TODO: Confirm scope! And figure out what some of the properties mean
## scope = character
### Spawns a fleet under the given character's control in the specified province.
alias[effect:spawn_fleet] = {
    province = scope[province]

    owner = scope[character]

    ### Can be localised somehow probably
    earmark = value_set[earmark]

    troops = {
        ## cardinality = 1..inf
        ### troop_type = { max_value starting_value }
        enum[troop_types_sea_only] = {
            ## cardinality = 2..2
            int[1..inf]
        }
    }

    ## cardinality = 0..1
    match_character = scope[character]

    ## cardinality = 0..1
    ### "Matches against the total levies of every single holding"
    match_mult = float

    ## cardinality = 0..1
    match_min = float

    ## cardinality = 0..1
    ### Probably - If yes, disbands on peace. Defaults to "no".
    disband_on_peace = bool

    ## cardinality = 0..1
    ### Probably - If yes, disbands on owner death. Defaults to "no".
    cannot_inherit = bool
}

# TODO: Confirm scope! And figure out what some of the properties mean
## scope = character
### Spawns a fleet under the given character's control in the closest province.
alias[effect:spawn_fleet] = {
    province = closest

    owner = scope[character]

    ### Can be localised somehow probably
    earmark = value_set[earmark]

    troops = {
        ## cardinality = 1..inf
        ### troop_type = { max_value starting_value }
        enum[troop_types_sea_only] = {
            ## cardinality = 2..2
            int[1..inf]
        }
    }

    ## cardinality = 0..1
    match_character = scope[character]

    ## cardinality = 0..1
    ### "Matches against the total levies of every single holding"
    match_mult = float

    ## cardinality = 0..1
    match_min = float

    ## cardinality = 0..1
    ### Probably - If yes, disbands on peace. Defaults to "no".
    disband_on_peace = bool

    ## cardinality = 0..1
    ### Probably - If yes, disbands on owner death. Defaults to "no".
    cannot_inherit = bool
}

# TODO: Confirm scope! And figure out what some of the properties mean
## scope = character
### Spawns an army under the given character's control in the specified province.
alias[effect:spawn_unit] = {
    province = scope[province]

    home = scope[province]

    owner = scope[character]

    ## cardinality = 0..1
    ### Defaults to the scoped character. Also can be "none".
    leader = scope[character]

    ## cardinality = 0..1
    ### Defaults to the scoped character. Also can be a character scope.
    leader = none

    ### ID of the unit, to be able to reference them later. Can be localized via $_ARMY and $_ARMY_OF.
    earmark = value_set[earmark]

    troops = {
        ## cardinality = 1..inf
        ### troop_type = { max_value starting_value }
        enum[troop_types_land_only] = {
            ## cardinality = 2..2
            int[1..inf]
        }
    }

    ## cardinality = 0..1
    ### Character to match against for match_mult.
    match_character = scope[character]

    ## cardinality = 0..1
    ### Proportional amount of troops to match_character total levy size (levies and event troops).
    match_mult = float

    ## cardinality = 0..1
    match_max = float

    ## cardinality = 0..1
    match_min = float

    ## cardinality = 0..1
    ### Probably - If yes, disbands on peace. Defaults to "no".
    disband_on_peace = bool

    ## cardinality = 0..1
    ### Probably - If yes, disbands on owner death. Defaults to "no".
    cannot_inherit = bool

    ## cardinality = 0..1
    ### Attrition multiplier (1.0 for normal, 0 for attrition-less).
    attrition = float[0.0..inf]

    ## cardinality = 0..1
    ### Will have normal maintenance cost multiplied by this value.
    maintenance_multiplier = float

    ## cardinality = 0..1
    scaled_by_biggest_garrison = float

    ## cardinality = 0..1
    ### If yes, merge all the regiments in this province together into one army. Defaults to "no".
    merge = bool

    ## cardinality = 0..1
    can_toggle_looting = bool

    ## cardinality = 0..1
    is_looter = bool

    ## cardinality = 0..1
    ### If yes, the unit can reinforce. Defaults to "no".
    reinforces = bool

    ## cardinality = 0..1
    reinforce_rate_multiplier = float

    ## cardinality = 0..1
    maintenance = bool
}

# TODO: Confirm scope! And figure out what some of the properties mean
## scope = character
### Spawns an army under the given character's control in the closest province.
alias[effect:spawn_unit] = {
    province = closest

    home = scope[province]

    owner = scope[character]

    ## cardinality = 0..1
    ### Defaults to the scoped character. Also can be "none".
    leader = scope[character]

    ## cardinality = 0..1
    ### Defaults to the scoped character. Also can be a character scope.
    leader = none

    ### ID of the unit, to be able to reference them later. Can be localized via $_ARMY and $_ARMY_OF.
    earmark = value_set[earmark]

    troops = {
        ## cardinality = 1..inf
        ### troop_type = { max_value starting_value }
        enum[troop_types_land_only] = {
            ## cardinality = 2..2
            int[1..inf]
        }
    }

    ## cardinality = 0..1
    ### Character to match against for match_mult.
    match_character = scope[character]

    ## cardinality = 0..1
    ### Proportional amount of troops to match_character total levy size (levies and event troops).
    match_mult = float

    ## cardinality = 0..1
    match_max = float

    ## cardinality = 0..1
    match_min = float

    ## cardinality = 0..1
    ### Probably - If yes, disbands on peace. Defaults to "no".
    disband_on_peace = bool

    ## cardinality = 0..1
    ### Probably - If yes, disbands on owner death. Defaults to "no".
    cannot_inherit = bool

    ## cardinality = 0..1
    ### Attrition multiplier (1.0 for normal, 0 for attrition-less).
    attrition = float[0.0..inf]

    ## cardinality = 0..1
    ### Will have normal maintenance cost multiplied by this value.
    maintenance_multiplier = float

    ## cardinality = 0..1
    scaled_by_biggest_garrison = float

    ## cardinality = 0..1
    ### If yes, merge all the regiments in this province together into one army. Defaults to "no".
    merge = bool

    ## cardinality = 0..1
    can_toggle_looting = bool

    ## cardinality = 0..1
    is_looter = bool

    ## cardinality = 0..1
    ### If yes, the unit can reinforce. Defaults to "no".
    reinforces = bool

    ## cardinality = 0..1
    reinforce_rate_multiplier = float

    ## cardinality = 0..1
    maintenance = bool
}

# TODO: Confirm scope! And figure out what some of the properties mean
## scope = character
### Spawns an army under the given character's control in the the province closest to the capital.
alias[effect:spawn_unit] = {
    province = scope[province]

    home = scope[province]

    owner = scope[character]

    ## cardinality = 0..1
    ### Defaults to the scoped character. Also can be "none".
    leader = scope[character]

    ## cardinality = 0..1
    ### Defaults to the scoped character. Also can be a character scope.
    leader = none

    ### ID of the unit, to be able to reference them later. Can be localized via $_ARMY and $_ARMY_OF.
    earmark = value_set[earmark]

    troops = {
        ## cardinality = 1..inf
        ### troop_type = { max_value starting_value }
        enum[troop_types_land_only] = {
            ## cardinality = 2..2
            int[1..inf]
        }
    }

    ## cardinality = 0..1
    ### Character to match against for match_mult.
    match_character = scope[character]

    ## cardinality = 0..1
    ### Proportional amount of troops to match_character total levy size (levies and event troops).
    match_mult = float

    ## cardinality = 0..1
    match_max = float

    ## cardinality = 0..1
    match_min = float

    ## cardinality = 0..1
    ### Probably - If yes, disbands on peace. Defaults to "no".
    disband_on_peace = bool

    ## cardinality = 0..1
    ### Probably - If yes, disbands on owner death. Defaults to "no".
    cannot_inherit = bool

    ## cardinality = 0..1
    ### Attrition multiplier (1.0 for normal, 0 for attrition-less).
    attrition = float[0.0..inf]

    ## cardinality = 0..1
    ### Will have normal maintenance cost multiplied by this value.
    maintenance_multiplier = float

    ## cardinality = 0..1
    scaled_by_biggest_garrison = float

    ## cardinality = 0..1
    ### If yes, merge all the regiments in this province together into one army. Defaults to "no".
    merge = bool

    ## cardinality = 0..1
    can_toggle_looting = bool

    ## cardinality = 0..1
    is_looter = bool

    ## cardinality = 0..1
    ### If yes, the unit can reinforce. Defaults to "no".
    reinforces = bool

    ## cardinality = 0..1
    reinforce_rate_multiplier = float

    ## cardinality = 0..1
    maintenance = bool
}

# STOPPED HERE

## scope = character
### Starts a faction on the liege of the current character scope, if it does not already exist. Different arguments are required depending on the type of the faction being started:
alias[effect:start_faction] = clause

## scope = character
### Steal population from another nomad clan
alias[effect:steal_population_scaled] = clause

## scope = character
###
alias[effect:subjugate_or_take_under_title] = clause

## scope = character
### Parameter
alias[effect:transfer_scaled_wealth] = clause

## scope = character
### Same as wealth ?
alias[effect:treasury] = int

## scope = character
### Scope gets impregnated by the value. This will work even on someone already pregnant.
alias[effect:unsafe_impregnate] = character/0

## scope = character
###
alias[effect:unsafe_impregnate_cuckoo] = character/0

# TODO update for thirdparty stuff when I do that
## scope = character
### Initiate a war; target is the defender, the scoped character is the attacker.
alias[effect:war] = {
    target = scope[character]
    casus_belli = <casus_belli>
    ## cardinality = 0..1
    thirdparty = scope[character]
    ## cardinality = 0..1
    ### Overrides the resulting threat value.
    infamy = int # TODO: is it really int?
}

## scope = character
### Note: Command shortened in example to avoid stretching the column.
alias[effect:vassalize_or_take_under_title] = clause

## scope = character
### Note: Command shortened in example to avoid stretching the column.
alias[effect:vassalize_or_take_under_title] = clause

# TODO update for thirdparty stuff when I do that
## scope = character
### Initiate a war; target is the defender, the scoped character is the attacker. Doesn't check if the casus belli can be used.
alias[effect:unsafe_war] = {
    target = scope[character]
    casus_belli = <casus_belli>
    ## cardinality = 0..1
    thirdparty = scope[character]
    ## cardinality = 0..1
    ### Overrides the resulting threat value.
    infamy = int # TODO: is it really int?
}

## scope = character
### Modify the wealth of scoped character with the specified amount, or with the wealth of another character.
alias[effect:wealth] = double/character

## scope = character(?)
### Destroys the hospital in the specified province
alias[effect:destroy_hospital] = province

## scope = character/artifact
### Destroy the scoped or specified artifact. If there is no name given, the scope must be an artifact, and the PREV scope must be the owner. If an artifact name is given, the scope should be the owner of the artifact. If they own more than one, only the first one will be destroyed. Cannot be used to destroy indestructible objects; see unsafe_destroy_artifact
alias[effect:destroy_artifact] = artifact/bool

## scope = character/province
### Converts to the parent religion
alias[effect:abandon_heresy] = bool

## scope = character/province
### Increment (or decrement) a variable with specified value, or another variable
alias[effect:change_variable] = clause

## scope = character/province
### Removes specified event id with a delayed trigger on current scope.
alias[effect:clear_delayed_event] = clause

## scope = character/province
### Clears all flags of the current scope that begin with the specified prefix
alias[effect:clear_flags_with_prefix] = scalar

## scope = character/province
### Creates a random character with specified parameters.
alias[effect:create_character] = clause

## scope = character/province
### creates a random character with diplomacy education
alias[effect:create_random_diplomat] = clause

## scope = character/province
### creates a random character with intrigue education
alias[effect:create_random_intriguer] = clause

## scope = character/province
### creates a random character with learning education
alias[effect:create_random_priest] = clause

## scope = character/province
### creates a random character with martial education
alias[effect:create_random_soldier] = clause

## scope = character/province
### creates a random character with stewardship education
alias[effect:create_random_steward] = clause

## scope = character/province
###
alias[effect:culture] = culture/character

## scope = character/province
### Divide a variable with specified value, or with another variable
alias[effect:divide_variable] = clause

## scope = character/province
### Multiply variable with specified value, or variable.
alias[effect:multiply_variable] = clause

## scope = character/province
### Adds a religion modifier to the religion of scoped character/province
alias[effect:religion_authority] = double/clause

## scope = character/province
### Change the target's culture to the one of current scope
alias[effect:reverse_culture] = character/title/province

## scope = character/province
###
alias[effect:reverse_religion] = character/title

## scope = character/province
### Used to create (or reset) a variable to a value, or to the value of another variable
alias[effect:set_variable] = clause

## scope = character/province
### Subtract specified value or another variable to a variable
alias[effect:subtract_variable] = clause

## scope = character/province/landed title/artifact/bloodline
### Lets the player rename the scoped entity.
alias[effect:prompt_name] = clause

## scope = character/title
### Adds a weak, non-inheritable claim. Note: assigned value cannot be a scope reference to a title.[1]
alias[effect:add_weak_claim] = title/character

## scope = character/title
### Adds a weak, inheritable claim. Note: assigned value cannot be a scope reference to a title.[1]
alias[effect:add_weak_pressed_claim] = title/character

## scope = character/title
### approve_law = law starts a vote on a law
alias[effect:approve_law] = law/title

## scope = character/title
###
alias[effect:conquest_culture] = culture/character

# TODO confirm scope
## scope = character
### Creates a hospital in the specified province
alias[effect:create_hospital] = scope[province]

# TODO confirm scope
## scope = character
### Creates a trade post in the specified province (only works if the character meets requirements such as being under their trade post limit)
alias[effect:create_tradepost] = scope[province]

## scope = character/title
### Also grants any vassal owning or below current title
alias[effect:grant_title] = title/character/clause

## scope = character/title
### No claim for the giver and no opinion bonus from the receiver.
alias[effect:grant_title_no_opinion] = title/character

## scope = character/title
###
alias[effect:prestige] = int

## scope = character/title
### Changes the (public) religion of scoped character/province/title. Can use a clause to specify which of the scope's religion to use, defaulting to public. See also unsafe_religion.
alias[effect:religion] = religion/clause

## scope = character/title
### Note: assigned value cannot be a scope reference to a title.[1]
alias[effect:remove_claim] = title/character

# TODO update for thirdparty stuff when I do that
## scope = character
### Initiate a war; target is the attacker, the scoped character is the defender.
alias[effect:reverse_war] = {
    target = scope[character]
    casus_belli = <casus_belli>
    ## cardinality = 0..1
    thirdparty = scope[character]
    ## cardinality = 0..1
    ### Overrides the resulting threat value.
    infamy = int # TODO: is it really int?
}

## scope = character/title
### Sets the liege of a character. Can be used to make a character become independent via set_defacto_liege = THIS
alias[effect:set_defacto_liege] = character/title

## scope = character/title
### Override name of character or title. Using set_name = """" resets the original name. You can also use a scope of the same type as the thing being renamed.
alias[effect:set_name] = string

## scope = character/title
### Bypasses some error-checking in set religion, allowing to change the religion of the leader of a holy order, a religious head or a rebel leader. Warning: use this effect with care !
alias[effect:unsafe_religion] = religion

## scope = character/title
###
alias[effect:usurp_title] = title/character/clause

## scope = character/title
### Gives strong claim to character being usurped.
alias[effect:usurp_title_plus_barony_if_unlanded] = title/character/clause

## scope = character/title
### Targeted character will usurp scoped title
alias[effect:usurp_title_plus_barony_if_unlanded] = title/character/clause

## scope = character/title/clause
### Targeted character will usurp scoped title
alias[effect:usurp_title_plus_barony_if_unlanded] = title/character

## scope = character/title/province
### Used to create (or reset) a variable to a the value of a trigger.
alias[effect:export_to_variable] = clause

## scope = character/title/province
### Divides the variable by the specified value or variable, returning the remainder of the division.
alias[effect:modulo_variable] = clause

## scope = character/title/province
### Creates a quest targeting the current scope or changes the target of an already exist target to the scope.
alias[effect:set_quest_target] = clause

## scope = character/title?
### As set_name, but sets name of scope to that of the right side of copy_name = <scope> argument.
alias[effect:copy_name] = character/title?

## scope = chararcter
###
alias[effect:clr_dynasty_flag] = flag

## scope = holding
### Adds a holding modifier. Can use optional field stacking = yes.
alias[effect:add_holding_modifier] = modifier

## scope = holding
### Makes the holding the capital of the province. Also see revoke_capital_holding.
alias[effect:make_capital_holding] = bool

## scope = holding
### Also see make_capital_holding
alias[effect:revoke_capital_holding] = bool

## scope = holding title?
###
alias[effect:set_trade_route_base_value] = double?

## scope = holding title?
###
alias[effect:set_trade_route_value_multiplier] = double?

## scope = offmap
### Wipes the specified flag from the scoped offmap power.
alias[effect:clr_offmap_tmp_flag] = string

## scope = offmap
### Sets the scoped offmap power's current ruler to the target scope.
alias[effect:set_offmap_holder] = character

## scope = offmap
### Sets the scoped offmap power's name to the localisation key corresponding to the string.
alias[effect:set_offmap_name] = string

## scope = offmap
### Adds the specified script flag to the scoped offmap power (check with has_offmap_tmp_flag or has_offmap_flag).
alias[effect:set_offmap_tmp_flag] = string

## scope = offmap
### Sets the scoped offmap power's current policy to the specified ID (corresponding to a policy in /common/offmap_powers/policies).
alias[effect:set_policy] = id

## scope = offmap
### Sets the scoped offmap power's current status modifier to the specified ID (corresponding to a modifier in /common/offmap_powers/statuses).
alias[effect:set_status] = id

## scope = province
### Adds N constructible settlement to a province. Can be negative. [2]
alias[effect:add_holding_slot] = int

## scope = province
### Adds a province modifier
alias[effect:add_province_modifier] = clause

## scope = province
### Construct a building in a special holding (hospital, fort or trade post).
alias[effect:add_to_extra_holding] = clause

## scope = province
### Builds a new settlement in the province.
alias[effect:build_holding] = clause

## scope = province
###
alias[effect:change_random_civ_tech] = int

## scope = province
###
alias[effect:change_random_eco_tech] = int

## scope = province
###
alias[effect:change_random_mil_tech] = int

## scope = province
### Improves technology in the province (referenced in common/technology.txt)
alias[effect:change_tech] = clause

## scope = province
###
alias[effect:clear_revolt] = bool

## scope = province
###
alias[effect:clr_province_flag] = flag

## scope = province
### Destroy the fort in a province.
alias[effect:destroy_fort] = province

## scope = province
### Destroy a building in a special holding (hospital, fort or trade post).
alias[effect:destroy_in_extra_holding] = clause

## scope = province
### Fires an event to scoped province. See event modding.
alias[effect:province_event] = clause

## scope = province
###
alias[effect:reduce_disease] = double

## scope = province
### Removes a province modifier
alias[effect:remove_province_modifier] = modifier

## scope = province
### Removes a number of instances of a province modifier (usually a stackable one).
alias[effect:remove_province_modifiers] = clause

## scope = province
###
alias[effect:set_province_flag] = flag

## scope = province
### Spawns a specific disease in the scoped province
alias[effect:spawn_disease] = disease

## scope = province
###
alias[effect:steal_random_tech] = character

## scope = province/character/title/
### Deletes a persistent event target previously saved in the currently scoped object.
alias[effect:clear_persistent_event_target] = var

## scope = province/character/title/
### Saves a scope into a persistent event target in the current scope to be reused later. name is the name of the event target, scope is the scope to save. Relative scoping works.
alias[effect:save_persistent_event_target] = clause

## scope = province/holding
### Destroys a random building. If a building is given as the value, then that building will never be picked for destruction (even if it is the only one left).
alias[effect:destroy_random_building] = bool/building

## scope = religion
### Adds an evil god name to the scoped religion.
alias[effect:add_evil_god_name] = key

## scope = religion
### Adds a god name to the scoped religion.
alias[effect:add_god_name] = key

## scope = religion
### Removes all evil god names from the scoped religion
alias[effect:remove_evil_god_names] = bool

## scope = religion
### Removes all god names from the scoped religion
alias[effect:remove_god_names] = bool

## scope = religion
### Sets the religion's high god's name to the given key.
alias[effect:set_high_god_name] = key

## scope = religion
### Sets the religion's men_can_take_consorts attribute to the given value.
alias[effect:set_men_can_take_consorts] = bool

## scope = religion
### Sets the religion's rel_head_defense attribute to the given value.
alias[effect:set_rel_head_defense] = bool

## scope = religion
### Sets the religion's women_can_take_consorts attribute to the given value.
alias[effect:set_women_can_take_consorts] = bool

## scope = society
### Adds a given value to the society's current progress.
alias[effect:add_society_progress] = float

## scope = society
### Set the society's current progress to a given value.
alias[effect:set_society_progress] = float

## scope = society
### Enables the society's progress bar.
alias[effect:start_society_progress] = bool

## scope = society
### Disables the society's progress bar.
alias[effect:stop_society_progress] = bool

## scope = title
### Construct a building in a holding. Also constructs the buildings it upgrades from, based on upgrades_from.
alias[effect:add_building] = building

## scope = title
### Sets the specified law for the scoped title. Can optionally specify to ignore cooldown and opinion effects (i.e. on vassals), defaulting to yes.
alias[effect:add_law] = law/clause

## scope = title
###
alias[effect:add_law_w_cooldown] = law

## scope = title
###
alias[effect:adjective] = string

## scope = title
### Update the percentage of income that goes to the creator for a dynamic mercenary company.
alias[effect:adjust_siphon_factor] = double

## scope = title
### Change the composition of a dynamic mercenary title.
alias[effect:change_mercenary_composition] = clause

## scope = title
### Changes the army size of a mercenary/adventurer title.
alias[effect:change_title_army_size] = double

## scope = title
###
alias[effect:clan_opinion] = clause

## scope = title
###
alias[effect:clan_reverse_opinion] = clause

## scope = title
###
alias[effect:clr_title_flag] = flag

## scope = title
### Copies title history from title on the right to title on the left.
alias[effect:copy_title_history] = title

## scope = title
### Copies title laws from title on the right to title on the left.
alias[effect:copy_title_laws] = title

## scope = title
### Create a feud between two clans
alias[effect:create_feud] = title

## scope = title
### Creates a dynamic title with specified parameters. Landless dynamic titles require a landed home province to both hold prisoners and to act as a fallback if the title gets destroyed. This command should be run from the home province scope, otherwise the whole court will end up stuck in province 0 when the holder dies.
alias[effect:create_title] = clause

## scope = title
### Break free the dynamic mercenary title from its creator.
alias[effect:cut_mercenary_creator_relation] = bool

## scope = title
### Changes the de jure structure
alias[effect:de_jure_liege] = character/title/0

## scope = title
### Destroys a landed title. It can later be re-created by the player or AI, at the difference of deactivating it via <code>activate_title.
alias[effect:destroy_landed_title] = title/bool

## scope = title
### Destroys scoped holding. Also see build_holding.
alias[effect:destroy_settlement] = title

## scope = title
### Changes council laws. Also see enable_council_voting_on_issue.
alias[effect:disable_council_voting_on_issue] = votingTopic

## scope = title
### Changes council laws. Also see disable_council_voting_on_issue.
alias[effect:enable_council_voting_on_issue] = votingTopic

## scope = title
### Ends a blood oath
alias[effect:end_oath] = title

## scope = title
### Similar to abdicate_to
alias[effect:gain_title] = character/title

## scope = title
### Gives opinion bonus toward the title giver
alias[effect:gain_title_plus_barony_if_unlanded] = character

## scope = title
### cognatic, agnatic, true_cognatic, enatic_cognatic, or enatic
alias[effect:gender_succ] = string

## scope = title
###
alias[effect:grant_kingdom_w_adjudication] = character

## scope = title
###
alias[effect:make_primary_title] = bool

## scope = title
###
alias[effect:press_claim] = character

## scope = title
###
alias[effect:province_capital] = bool

## scope = title
###
alias[effect:rebel_defection] = bool

## scope = title
###
alias[effect:refill_holding_levy] = bool

## scope = title
###
alias[effect:remove_building] = building

## scope = title
### Removes a holding modifier
alias[effect:remove_holding_modifier] = modifier

## scope = title
### Removes a number of instances of a holding modifier (usually a stackable one).
alias[effect:remove_holding_modifiers] = clause

## scope = title
### Removes the scoped title from being a holy site of the given religion. Warning: this lets you have less than 5 holy sites which might cause weirdness. Also, removing holy sites to a religion but not its heresies will cause their icons to show up individually on other shared holy sites instead of being hidden like normal.
alias[effect:remove_holy_site] = religion

## scope = title
### Removes the scoped title from being a holy site of the given religion and its heresies. Warning: this lets you have less than 5 holy sites which might cause weirdness.
alias[effect:remove_holy_site] = religion

## scope = title
###
alias[effect:reset_coa] = title

## scope = title
###
alias[effect:revoke_law] = law

## scope = title
###
alias[effect:set_allow_feminism] = bool

## scope = title
### Crown laws
alias[effect:set_allow_free_duchy_revokation] = bool

## scope = title
### Crown laws
alias[effect:set_allow_free_infidel_revokation] = bool

## scope = title
### Crown laws
alias[effect:set_allow_free_revokation] = bool

## scope = title
### Crown laws
alias[effect:set_allow_free_vice_royalty_revokation] = bool

## scope = title
###
alias[effect:set_allow_gender_laws] = bool

## scope = title
### Crown laws
alias[effect:set_allow_title_revokation] = bool

## scope = title
### Crown laws
alias[effect:set_allow_vice_royalties] = bool/tier

## scope = title
###
alias[effect:set_allows_matrilineal_marriage] = bool

## scope = title
### Crown laws
alias[effect:set_appoint_generals] = bool

## scope = title
### Crown laws
alias[effect:set_appoint_regents] = bool

## scope = title
### Set the coats of arms (flag) of a title to that of another title. An otherwise unused ""dummy"" title in landed_titles can be used to define the coats of arms.
alias[effect:set_coa] = title

## scope = title
### Sets the scoped title to be a holy site of the given religion. Warning: this lets you have more than 5 holy sites which might cause weirdness. Also, adding holy sites to a religion but not its heresies will cause their icons to show up individually on other shared holy sites instead of being hidden like normal.
alias[effect:set_holy_site] = religion

## scope = title
### Sets the scoped title to be a holy site of the given religion and its heresies. Warning: this lets you have more than 5 holy sites which might cause weirdness.
alias[effect:set_holy_site_with_heresies] = religion

## scope = title
### Crown laws
alias[effect:set_investiture] = string

## scope = title
###
alias[effect:set_mercenary_maintenance_modifier] = modifier

## scope = title
### The scoped title becomes under the authority of the specified Pentarch seat
alias[effect:set_pentarch_title] = title/none

## scope = title
### Sets the preferred capital of the scoped title to the specified provinces. Works for both dynamic and static titles since patch 2.8.
alias[effect:set_preferred_capital] = province

## scope = title
### Crown laws: avoid titles leaving the realm upon inheritance
alias[effect:set_protected_inheritance] = bool

## scope = title
### Sets the title's short_name parameter to the given value.
alias[effect:set_short_name] = bool

## scope = title
### Crown laws: allow/disallow vassals to wage war
alias[effect:set_the_kings_full_peace] = bool

## scope = title
### Crown laws: allow/disallow vassals to wage war between them
alias[effect:set_the_kings_peace] = bool

## scope = title
### set/unset title as being an adventurer title.
alias[effect:set_title_adventurer] = clause

## scope = title
### Creates a flag on a title
alias[effect:set_title_flag] = flag

## scope = title
### set/unset title as being a temporary title.
alias[effect:set_title_landless] = clause

## scope = title
### set/unset title as being a nomad title.
alias[effect:set_title_nomad] = clause

## scope = title
### Whether liege can directly raise tribal vassal levies
alias[effect:set_tribal_vassal_levy_control] = bool

## scope = title
### Whether tribal vassals pay taxes to their liege
alias[effect:set_tribal_vassal_tax_income] = bool

## scope = title
### Valid successions: gavelkind, primogeniture, feudal_elective, seniority, catholic_bishopric, open_elective, turkish_succession, patrician_elective, ultimogeniture, tanistry, appointment, papal_succession, elective_gavelkind
alias[effect:succession] = succession

## scope = title
###
alias[effect:succession_w_cooldown] = succession

## scope = title
### Gives strong claim to character being usurped
alias[effect:usurp_title_only] = character/clause

## scope = title(holding)
### Converts holding to another holding type: CASTLE, CITY, TEMPLE, TRIBAL, NOMAD
alias[effect:convert_to] = type

## scope = title/character
### Adds a strong, non-inheritable claim to a character.
alias[effect:add_claim] = character/title

## scope = title/character
### Adds a strong, inheritable claim. Note: assigned value cannot be a scope reference to a title.[1]
alias[effect:add_pressed_claim] = character/title

## scope = title/province
###
alias[effect:seize_trade_post] = character

## scope = unit
### Creates casualties for an army (whole unit or a specific unit type) by either a fixed amount or percentage. They won't be displayed in a combat report.[3][4]. Using a negative number will heal units instead.
alias[effect:damage_unit] = clause

## scope = unit
### Removes morale for the army (or adds morale with negative values). Only takes absolute values.
alias[effect:damage_unit_morale] = float

## scope = unit
###
alias[effect:set_can_toggle_looting] = bool

## scope = unit
### Used with set_can_toggle_looting
alias[effect:set_looting] = bool

## scope = unit/siege
### Changes the morale of the unit by the amount indicated
alias[effect:morale] = double

## scope = unit/siege
### Changes the size of the unit by the amount indicated
alias[effect:troops] = double

## scope = war
### Possible war ends: invalid, whitepeace, success, reverse_demand
alias[effect:end_war] = string