### True if yes. False if no.
alias[trigger:always] = bool

## scope = character
### Compares years with the absolute value of the age difference between the scoped and the given characters.
alias[trigger:age_diff] = {
    who = scope[character]
    years = int
}

## scope = any
### Compares with the value of the difficulty setting.
alias[trigger:difficulty] = int

# TODO: enum?
## scope = any
### True if the difficulty setting matches the given value.
alias[trigger:difficulty] = TODO

## scope = any
### Compares duration to how long the given global flag has been set, if at all.
alias[trigger:had_global_flag] = {
    flag = value[global_flag]
    enum[duration_dy] = int
}

## scope = any
### True if the user has the given dlc enabled.
alias[trigger:has_dlc] = enum[dlcs]

## scope = any
### True if the given game rule has the given option selected.
alias[trigger:has_game_rule] = {
    name = <game_rule>
    value = <game_rule_option>
}

## scope = any
### Checks if the game has been unpaused.
alias[trigger:has_game_started] = bool

## scope = any
### True if the global flag is currently set.
alias[trigger:has_global_flag] = value[global_flag]

## scope = any
### Checks if religion features are enabled in the current game; usually dependent on whether or not Holy Fury is active.
alias[trigger:has_religion_features] = bool

## scope = any
### Checks if the world is randomised or shattered.
alias[trigger:is_alternate_start] = bool

## scope = any
### True if the given society's given rank is full.
alias[trigger:is_society_rank_full] = {
    society = scope[society]
    rank = int[1..4]
}

## scope = any
### True if the given title is active. For landed titles this also means having a holder, as they deactivate when not held.
alias[trigger:is_title_active] = scope[title]

## scope = any
### Compares with the current in-game month. Ranges from 0 (January) to 11 (December).
alias[trigger:month] = int[0..11]

## scope = any
### Checks if the game is multiplayer.
alias[trigger:multiplayer] = bool

# TODO: Is wiki correct about it being an inverse chance? I'm not sure, so I'm sticking with the obvious interpretation for now, but confirm
## scope = any
### Has a [value]% chance of being true.
alias[trigger:random] = int[1..100]

## scope = any
### Compares with the IRL month. Ranges from 0 (January) to 11 (December).
alias[trigger:real_month_of_year] = int[0..11]

# TODO: Compares?
## scope = any
## replace_scope = { this = province }
### True if a given percentage of provinces in a given region meets the given conditions.
alias[trigger:regional_percentage] = {
    region = <region>
    ### 0.0 is 0%, 1.0 is 100%
    percentage = float[0.0..1.0]

    alias_name[trigger] = alias_match_left[trigger]
}

## scope = any
### True if the given date matches the initial start date of current game.
alias[trigger:start_date] = date

## scope = any
### Checks if current checksum matches at least one supported checksum in the .mod files of any active mods.
alias[trigger:supported_checksum] = bool

## scope = any
### Compares with the number of years since the beginning of the current game.
alias[trigger:total_years_played] = int

## scope = any
### Compares with the current year.
alias[trigger:year] = int

# TODO: Confirm scopes
## scope = culture
### Compares with the number of provinces in the world with the culture associated with the scoped entity.
alias[trigger:num_culture_provinces] = int

# TODO: Confirm scopes
## scope = any that have associated religion
### Compares with the number of provinces in the world with the religion associated with the scoped entity.
alias[trigger:num_religion_provinces] = int

## scope = any with flags
### Checks if the current scope has had a given flag for a given time in days, months or years. Works for any scope that can store flags, unlike the more specific had_scope_flag commands.
alias[trigger:had_flag] = TODO

## scope = any with flags
### Checks if the current scope has a given flag. Works for any scope that can store flags, unlike the more specific has_scope_flag commands.
alias[trigger:has_flag] = TODO

## scope = artifact
### True if the scoped artifact is the same as the given artifact.
alias[trigger:artifact] = scope[artifact]

## scope = artifact
### Compares with the artifact's age. Always false if the artifact has no known creation date.
alias[trigger:artifact_age] = int

## scope = artifact
### True if the scoped artifact can be gifted to the given character.
alias[trigger:artifact_can_be_gifted_to] = scope[character]

## scope = artifact
### True if the scoped artifact is of the given type.
alias[trigger:artifact_type] = <artifact>

## scope = artifact
### True if the given character owns at least one instance of the scoped artifact's type.
alias[trigger:artifact_type_owned_by] = scope[character]

## scope = artifact
### True if the scoped artifact has the given flag currently set.
alias[trigger:has_artifact_flag] = value[artifact_flag]

## scope = artifact
### Checks if the scoped artifact has a creation date on record.
alias[trigger:has_known_creation_date] = bool

## scope = artifact
### Checks if the scoped artifact is currently active, as defined by its active trigger. Artifacts without an active trigger will always be considered active, even if not owned, and artifacts with an active trigger and without an owner will never be considered active.
alias[trigger:is_artifact_active] = bool

## scope = artifact
### Checks if the scoped artifact is currently equipped by its owner.
alias[trigger:is_artifact_equipped] = bool

## scope = artifact
### True if the scoped artifact is the given artifact.
alias[trigger:is_artifact_same_type_as] = scope[artifact]

## scope = artifact
### Checks if the artifact has indestructible = yes.
alias[trigger:is_indestructible] = bool

## scope = artifact
### Compares with the quality of the scoped artifact.
alias[trigger:quality] = int

# TODO: Elaborate?
## scope = battle
### Used in combat tactics
alias[trigger:flank_has_leader] = bool

# TODO: Elaborate?
## scope = battle
###
alias[trigger:flank_has_tactic] = bool

## scope = bloodline
### True if the scoped bloodline is the given bloodline.
alias[trigger:bloodline] = scope[bloodline]

## scope = bloodline
### True if the scoped bloodline is active for the given character.
alias[trigger:bloodline_is_active_for] = scope[character]

## scope = bloodline
### Compares duration to how long the given flag has been set in the scoped bloodline, if at all.
alias[trigger:had_bloodline_flag] = {
    flag = value[bloodline_flag]
    enum[duration_dy] = int
}

## scope = bloodline
### True if the scoped bloodline has the given flag currently set.
alias[trigger:has_bloodline_flag] = value[bloodline_flag]

## scope = character
### Compares with the age of the scoped character.
alias[trigger:age] = int

## scope = character
### Checks if the scoped character is an ai.
alias[trigger:ai] = bool

## scope = character
### Compares with the total ai_ambition modifier value of the scoped character.
alias[trigger:ai_ambition] = int

## scope = character
### Compares with the total ai_greed modifier value of the scoped character.
alias[trigger:ai_greed] = int

## scope = character
### Compares with the total ai_honor modifier value of the scoped character.
alias[trigger:ai_honor] = int

## scope = character
### Compares with the total ai_rationality modifier value of the scoped character.
alias[trigger:ai_rationality] = int

## scope = character
### Compares with the total ai_zeal modifier value of the scoped character.
alias[trigger:ai_zeal] = int

## scope = character
### True if the scoped character is among the [value] most powerful vassals in the realm. It compares the character's powerbase with that of all other direct vassals of the same liege.
alias[trigger:among_most_powerful_vassals] = int

## scope = character
### True if the scoped character is at the same location as the given character.
alias[trigger:at_location] = scope[character]

## scope = character
### True if the scoped character is located in the given province.
alias[trigger:at_location] = scope[province]

## scope = character
### Compares value with the absolute value of the difference in the given attribute of the scoped and the given characters.
alias[trigger:attribute_diff] = {
    character = scope[character]
    attribute = enum[attributes]
    value = int
}

## scope = character
### Compares with the base health of the scoped character.
alias[trigger:base_health] = float

# TODO: Possibly outdated, GHWs and so on?
## scope = character
### Checks if crusades have been unlocked.
alias[trigger:can_call_crusade] = bool

# TODO: Figure out.
## scope = character
###
alias[trigger:can_change_religion] = bool

# TODO: Figure out.
## scope = character
###
alias[trigger:can_copy_personality_trait_from] = scope[character]

## scope = character
### Checks if the scoped character is below their limit on leadership traits (based on their trait with leadership_traits = N).
alias[trigger:can_have_more_leadership_traits] = bool

## scope = character
### True if the scoped character can hold the given minor title.
alias[trigger:can_hold_title] = <minor_title>

## scope = character
### True if the scoped character can hold the given job title.
alias[trigger:can_hold_title] = <minor_title.job>

## scope = character
### True if the scoped character can join the given society.
alias[trigger:can_join_society] = scope[society]

## scope = character
### Checks if the scoped character doesn't have any traits with cannot_marry = yes, rule a theocracy of a religion that prohibits priest marriages, or belong to a holy order.
alias[trigger:can_marry] = bool

## scope = character
### True if the scoped character can marry the given character.
alias[trigger:can_marry] = scope[character]

## scope = character
### Checks if the scoped character can see the given character's secret religion.
alias[trigger:can_see_secret_religion] = scope[character]

## scope = character
### Checks if the scoped character can get the job position of the given character.
alias[trigger:can_swap_job_title] = scope[character]

# TODO: better docs, use the thirdparty subtypes when I get around to doing them.
## scope = character
### True if the given casus belli would show up and be usable in the UI for the scoped character against the given target. Checks everything in the CB itself, plus the extra hardcoded restrictions on regular war declarations.
alias[trigger:can_use_cb] = {
    target = scope[character]
    target = scope[title]

    casus_belli = <casus_belli>
    ## cardinality = 0..1
    thirdparty_character = scope[character]
    ## cardinality = 0..1
    thirdparty_title = scope[title]

    only_check_triggers = bool
}

## scope = character
### True if the scoped character is the given character.
alias[trigger:character] = scope[character]

## scope = character
### True if the scoped character is the holder of the given title.
alias[trigger:character] = scope[title]

## scope = character
### True if the scoped character has the given id.
alias[trigger:character] = int

# TODO: Confirm but I'm reasonably certain it works this way.
## scope = character
### Compares value with the clan opinion of the scoped character towards the given character.
alias[trigger:clan_opinion] = {
    who = scope[character]
    value = 0
}

## scope = character
### Compares with the combat rating of the scoped character.
alias[trigger:combat_rating] = int

## scope = character
### Compares value with the absolute value of the difference in the combat ratings of the scoped and the given characters.
alias[trigger:combat_rating_diff] = {
    character = scope[character]
    value = int
}

# TODO: Wiki says baronies but I think it's all titles (considering duchy titles are also used in vanilla on RHS); confirm
## scope = character
### True if the scoped character controls (personally or via vassals) all of the titles under the given title.
alias[trigger:completely_controls] = scope[title]

## scope = character
### True if the scoped character controls (personally or via vassals) all of the titles in the given region.
alias[trigger:completely_controls_region] = <region>

## scope = character
### True if the scoped character is old enough to be the given character's parent. This means that they're at least AGE_OF_MARRIAGE_MALE years older, and at most MAX_CHILD_BIRTH_AGE years older if female (for immortal characters, as long as they became immortal before this age they bypass the check). It also checks that they didn't die before the birth date of the target.
alias[trigger:could_be_parent_of] = scope[character]

## scope = character
### Compares with the day of the scoped character's date of birth.
alias[trigger:day_of_birth] = int

## scope = character
### Compares with the number of days the scoped character has been at their current rank in their society.
alias[trigger:days_at_current_society_rank] = int

## scope = character
### Compares with the number of days the scoped character has been in their society.
alias[trigger:days_in_society] = int

# TODO: confirm
## scope = character
### True if the scoped character has died of the given reason.
alias[trigger:death_reason] = <death>

## scope = character
### Compares with the decadence of the scoped character.
alias[trigger:decadence] = float

# TODO: Figure out
## scope = character
###
alias[trigger:defending_against_claimant] = clause

# TODO: Figure out
## scope = character
###
alias[trigger:demesne_efficiency] = float

# TODO: Figure out
## scope = character
###
alias[trigger:demesne_garrison_size] = int

## scope = character
### Compares with the demesne size of the scoped character.
alias[trigger:demesne_size] = int

## scope = character
### Compares with the scoped character's demesne size divided by their demesne size limit.
alias[trigger:demesne_size_compared_to_limit] = float

## scope = character
### Compares with the scoped character's own diplomacy.
alias[trigger:diplomacy] = int

## scope = character
### Checks if the scoped character has the diplomatic_immunity flag, protecting him from hostile actions.
alias[trigger:diplomatic_immunity] = bool

# TODO: scope[offmap]?
## scope = character
### True if the scoped character matches the current dislike of the given offmap power. If the dislike trigger has a context, the context parameter must match to return true. If the dislike trigger has no context, the context parameter must be omitted to return true.
alias[trigger:disliked_by_offmap] = {
    type = <offmap>
    ## cardinality = 0..1
    context = value[offmap_like_context]
}

# TODO: Figure out
## scope = character
###
alias[trigger:distance_from_realm] = {
    who = scope[character]
    value = int
}

## scope = character
### Compares with the scoped character's dynasty's dynastic prestige.
alias[trigger:dynastic_prestige] = int

## scope = character
### True if the scoped character's dynasty matches the given character's.
alias[trigger:dynasty] = scope[character]

## scope = character
### True if the scoped character's dynasty has the given id.
alias[trigger:dynasty] = <dynasty>

## scope = character
### True if the character has no dynasty (is lowborn).
alias[trigger:dynasty] = no

## scope = character
### True if the character has no dynasty (is lowborn).
alias[trigger:dynasty] = none

# TODO: Figure out
## scope = character
###
alias[trigger:dynasty_realm_power] = float

# TODO: Figure out
## scope = character
###
alias[trigger:excommunicated_for] = scope[character]

# TODO: Not sure if right subtype splitting, confirm; and figure out
## scope = character
###
alias[trigger:faction_exists] = {
    faction = <objective.faction_character>
}

# TODO: Not sure if right subtype splitting, confirm; and figure out
## scope = character
###
alias[trigger:faction_exists] = {
    faction = <objective.faction_liege_titles>
    title = scope[title]
}

# TODO: Not sure if right subtype splitting, confirm; and figure out
## scope = character
###
alias[trigger:faction_exists] = {
    faction = <objective.faction_liege_titles_w_claimant>
    title = scope[title]
    thirdparty = scope[character]
}

# TODO: Figure out
## scope = character
###
alias[trigger:faction_power] = {
    faction = <objective.faction>
    power = float
}

# TODO: 100% sure that refers only to close family; confirm; also figure out what the bool type means; couldn't find usage of title
## scope = character
###
alias[trigger:family] = scope[character]
#alias[trigger:family] = character/title/bool

## scope = character
### Checks if the scoped pregnant woman's unborn child has a known father.
alias[trigger:father_of_unborn_known] = bool

## scope = character
### Compares with the character's fertility value.
alias[trigger:fertility] = float

# TODO: Figure out
## scope = character
###
alias[trigger:from_ruler_dynasty] = bool

## scope = character
### Compares with the wealth of the scoped character.
alias[trigger:gold] = int

## scope = character
### True if the scoped character's government matches the given government. For checking government groups, see is_feudal, is_republic, etc.
alias[trigger:government] = <government>

## scope = character
### True if the scoped character's graphical culture matches the given graphical culture. This is different from the effect set_graphical_culture which takes a culture, not a culturegfx.
alias[trigger:graphical_culture] = <graphical_culture>

## scope = artifact
### Compares duration to how long the given flag has been set in the scoped artifact, if at all.
alias[trigger:had_artifact_flag] = {
    flag = value[artifact_flag]
    enum[duration_dy] = int
}

## scope = character
### Compares duration to how long the given flag has been set in the scoped character, if at all.
alias[trigger:had_character_flag] = {
    flag = value[character_flag]
    enum[duration_dy] = int
}

## scope = character
### Compares duration to how long the given flag has been set in the scoped character's dynasty, if at all.
alias[trigger:had_dynasty_flag] = {
    flag = value[dynasty_flag]
    enum[duration_dy] = int
}

# TODO: Confirm
## scope = character
### Checks if the scoped character has an active ambition.
alias[trigger:has_ambition] = bool

# TODO: Confirm
## scope = character
### True if the scoped character's active ambition matches the given ambition.
alias[trigger:has_ambition] = <objective.ambition>

# TODO: Confirm
## scope = character
### True if the scoped character has the given opinion modifier towards any other character.
alias[trigger:has_any_opinion_modifier] = <opinion_modifier>

## scope = character
### Checks if the scoped character has an active quest.
alias[trigger:has_any_quest] = bool

# TODO: Confirm
## scope = character
### Checks if the scoped character has any trait with is_symptom = yes.
alias[trigger:has_any_symptom] = bool

## scope = character
### Checks if the scoped character owns any artifact of the given type.
alias[trigger:has_artifact] = <artifact>

## scope = character
### Checks to see if the scoped character has assigned the given minor title.
alias[trigger:has_assigned_minor_title] = <minor_title>

## scope = character
### Checks to see if the scoped character has assigned a given amount of the given minor title.
alias[trigger:has_assigned_minor_title] = {
    title = <minor_title>
    count = int
}

# TODO: Scopes?
## scope = { character religion }
### Checks if the religion associated with the scoped entity has autocephaly = yes.
alias[trigger:has_autocephaly] = bool

# TODO: FIgure out
## scope = character
###
alias[trigger:has_blood_oath_with] = scope[character]

# TODO: FIgure out
## scope = character
###
alias[trigger:has_called_crusade] = bool

## scope = character
### True if the scoped character has the given flag currently set.
alias[trigger:has_character_flag] = value[character_flag]

# TODO: subtype
## scope = character
### True if the scoped character has the given event modifier.
alias[trigger:has_character_modifier] = <event_modifier>

## scope = character
### Checks if the scoped character has children.
alias[trigger:has_children] = bool

# TODO: Figure out (though this along with many others is kinda obvious)
## scope = character
###
alias[trigger:has_claim] = title

# TODO: Scopes?
## scope = { character religion }
### Checks if the religion associated with the scoped entity has max_consorts > 0.
alias[trigger:has_concubinage] = bool

# TODO: FIgure out
## scope = character
###
alias[trigger:has_council] = bool

## scope = character
### True if the scoped character's dynasty has the given flag currently set.
alias[trigger:has_dynasty_flag] = value[dynasty_flag]

# TODO: Confirm
## scope = character
### True if the scoped character has any regiments marked with the given earmark under their control.
alias[trigger:has_earmarked_regiments] = value[earmark]

# TODO: Confirm
## scope = character
### True if the scoped character has any regiments marked with the given earmark under their control that are not raiding.
alias[trigger:has_earmarked_regiments_not_raiding] = value[earmark]

# TODO: FIgure out
## scope = character
###
alias[trigger:has_embargo] = scope[character]

# TODO: FIgure out
## scope = character
###
alias[trigger:has_feud_with] = scope[character]

## scope = character
### True if the scoped character has the given focus.
alias[trigger:has_focus] = <objective.focus>

# TODO: FIgure out
## scope = character
###
alias[trigger:has_guardian] = bool

## scope = character
### Check if the scoped character's culture has horde = yes.
alias[trigger:has_horde_culture] = bool

## scope = character
### Checks if the scoped character in the current scope has a trait with cannot_inherit = yes.
alias[trigger:has_inheritance_blocker] = bool

## scope = character
### True if the scoped character has the given amount of instances of the given event modifier.
alias[trigger:has_instances_of_character_modifier] = {
    modifier = <event_modifier>
    amount = int
}

# TODO: Figure out
## scope = character
###
alias[trigger:has_job_action] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:has_job_action] = <job_action>

## scope = character
### Checks if the scoped character has any job title.
alias[trigger:has_job_title] = bool

## scope = character
### True if the scoped character has the given job title.
alias[trigger:has_job_title] = <job_title>

## scope = character
### Checks if the scoped character has any title.
alias[trigger:has_landed_title] = bool

## scope = character
### True if the scoped character has the given title.
alias[trigger:has_landed_title] = scope[title]

# TODO: Reword
## scope = character
### Prevents wars, also see will_liege_enforce_peace.
alias[trigger:has_liege_enforced_peace] = bool

## scope = character
### Checks if the scoped character has any living children.
alias[trigger:has_living_children] = bool

## scope = character
### Checks if the scoped character has any lovers.
alias[trigger:has_lover] = bool

## scope = character
### Checks if the scoped character has any minor or religious title.
alias[trigger:has_minor_title] = bool

# TODO: Do job titles work?
## scope = character
### True if the scoped character has the given minor title.
alias[trigger:has_minor_title] = <minor_title>

## scope = character
### True if the scoped character has the given religious title.
alias[trigger:has_minor_title] = <minor_title.religious>

# TODO: Reword, find out what "recently" entails
## scope = character
### Character holds titles he just recently acquired
alias[trigger:has_newly_acquired_titles] = bool

## scope = character
### Checks if the scoped character has any nickname.
alias[trigger:has_nickname] = bool

## scope = character
### True if the scoped character has the given nickname.
alias[trigger:has_nickname] = <nickname>

## scope = character
### True if the scoped character has a non-aggression pact with the given character.
alias[trigger:has_non_aggression_pact_with] = scope[character]

# TODO: Low priority reword for current wording
## scope = character
### Deprecated, replaced by has_ambition/has_plot
alias[trigger:has_objective] = <objective>

# TODO: scope[offmap] or <offmap>?
## scope = character
### Compares with the scoped character's amount of currency with the given offmap power.
alias[trigger:has_offmap_currency] = {
    offmap = scope[offmap]
    value = int
}

# TODO: scope[offmap] or <offmap>?
## scope = character
### True if the scoped character's player has chosen to receive news events from the given offmap power through the interface.
alias[trigger:has_offmap_news_enabled] = <offmap>

## scope = character
### Checks if the scoped character has the given opinion modifier towards who.
alias[trigger:has_opinion_modifier] = {
    who = scope[character]
    modifier = <opinion_modifier>
}

# TODO: Figure out
## scope = character
###
alias[trigger:has_overseas_holdings] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:has_plot] = <objective.plot>

# TODO: Scopes?
## scope = character
### Checks if the religion associated with the scoped entity has max_wives > 0.
alias[trigger:has_polygamy] = bool

# TODO: Figure out limits of those ints
## scope = character
### True if the scoped character has a portrait property with the given index on the given layer.
alias[trigger:has_portrait_property] = {
    layer = int
    index = int
}

## scope = character
### True if the scoped character's council position matches the given council position.
alias[trigger:has_position] = <council_position>

## scope = character
### True if the scoped character's council position matches the council position of the given character.
alias[trigger:has_position] = scope[character]

## scope = character
### True if the scoped character has a pressed claim (i.e., a non-heritable weak or strong claim created through Fabricate Claims) on the given title.
alias[trigger:has_pressed_claim] = scope[title]

# TODO: Check RHS - why is it a character, why does that matter?
## scope = character
### Whether character has some personal levies (vassal levies do not count)
alias[trigger:has_raised_levies] = scope[character]

## scope = character
### True if the scoped character has a given quest.
alias[trigger:has_quest] = value[quest]

## scope = character
### Checks if the scoped character has a regent.
alias[trigger:has_regent] = bool

# TODO: Fgiure out
## scope = character
###
alias[trigger:has_regiments] = bool

# TODO: Probably a religion scope allowed too?
## scope = character
### Checks if the scoped character's religion has a given religion feature.
alias[trigger:has_religion_feature] = <religion_feature>

## scope = character
### Checks if the scoped character secretly follows another religion.
alias[trigger:has_secret_religion] = bool

## scope = character
### True if the scoped character has a strong claim on the given title.
alias[trigger:has_strong_claim] = <title>

## scope = character
### True if the scoped character has a strong pressed claim (i.e., a non-heritable strong claim) on the given title.
alias[trigger:has_strong_pressed_claim] = <title>

## scope = character
### True if the scoped character has a trait with a command modifier for the given terrain type.
alias[trigger:has_terrain_specialization] = enum[terrain]

## scope = character
### True if the scoped character has a trait with a command modifier for any terrain type.
alias[trigger:has_terrain_specialization] = any

# TODO: Figure out what the bool means - how is that different from "any"?
## scope = character
### ???
alias[trigger:has_terrain_specialization] = bool

## scope = character
### True if the scoped character has a truce with the given character.
alias[trigger:has_truce] = scope[character]

## scope = character
### True if the scoped character has a weak claim on the given title.
alias[trigger:has_weak_claim] = <title>

# TODO: isn't weak pressed inheritable?
## scope = character
### True if the scoped character has a weak pressed claim (i.e., a non-inheritable claim) on the target title.
alias[trigger:has_weak_pressed_claim] = <title>

## scope = character
### Compares with the scoped character's total health value.
alias[trigger:health] = int

## scope = character
### Compares with the amount of the scoped character's traits that have is_health = yes.
alias[trigger:health_traits] = int

# TODO: Figure out
## scope = character
###
alias[trigger:held_title_rating] = scope[character]

## scope = character
### True if the scoped character has any non-temporary titles with higher tier than the given tier.
alias[trigger:higher_real_tier_than] = enum[title_tiers]

## scope = character
### True if the scoped character has any non-temporary titles with higher tier than the given character's tier.
alias[trigger:higher_real_tier_than] = scope[character]

# TODO: wha
## scope = character
###
alias[trigger:holding_diff] = TODO

## scope = character
### True if the given character owes a favor to the scoped character.
alias[trigger:holds_favor_on] = scope[character]

## scope = character
### Checks if the scoped character has any trait with immortal = yes.
alias[trigger:immortal] = bool

## scope = character
### Compares with the age at which the scoped character has become immortal.
alias[trigger:immortal_age] = int

# TODO: Confirm
## scope = character
### Compares with how many days the scoped character has been imprisoned for.
alias[trigger:imprisoned_days] = int

# TODO: Figure out
## scope = character
###
alias[trigger:in_battle] = bool

# TODO: Confirm about subunits.
## scope = character
### Checks if the scoped character is leading a unit or subunit.
alias[trigger:in_command] = bool

# TODO: Confirm
## scope = character
### Checks if the scoped character belongs to any faction.
alias[trigger:in_faction] = bool

## scope = character
### True if the scoped character belongs to a faction of the given type.
alias[trigger:in_faction] = <objective.faction>

# TODO: Figure out
## scope = character
###
alias[trigger:in_revolt] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:in_siege] = bool

## scope = character
### Compares with the amount of threat the scoped character has.
alias[trigger:infamy] = float

# TODO: Confirm if society scope doesn't worn
## scope = character
### True if the scoped character is interested in the given society.
alias[trigger:interested_in_society] = <society>

## scope = character
### True if the scoped character is interested in the society of the given character.
alias[trigger:interested_in_society_of_character] = scope[character]

## scope = character
### Compares with the scoped character's own intrigue.
alias[trigger:intrigue] = int

# TODO: Confirm doc for independent
## scope = character
### Checks if the scoped character is not at liege's court.
alias[trigger:is_abroad] = bool

## scope = character
### Checks if the scoped character is an adult.
alias[trigger:is_adult] = bool

## scope = character
### Checks if the scoped character is alive.
alias[trigger:is_alive] = bool

# TODO: How is that an expensive calculation? Gotta confirm
## scope = character
### True if the scoped character has an alliance or a tributary relationship with the given character. Does not check for being temporary war allies. Expensive, use with care.
alias[trigger:is_allied_with] = scope[character]

## scope = character
### Checks if the scoped character can raid.
alias[trigger:is_allowed_to_loot] = bool

## scope = character
### True if the given character is descended from the scoped character, within up to sixteen generations. Expensive, use with care.
alias[trigger:is_ancestor_of] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_at_sea] = bool

## scope = character
### True if the scoped character is a sibling of either of the given character's parents.
alias[trigger:is_aunt_uncle_of] = scope[character]

## scope = character
### Checks if the scoped character is betrothed to anyone.
alias[trigger:is_betrothed] = bool

## scope = character
### True if the scoped character is the founder of the given bloodline.
alias[trigger:is_bloodline_founder_of] = scope[bloodline]

## scope = character
### True if the scoped character is a member of the given bloodline.
alias[trigger:is_bloodline_member_of] = scope[bloodline]

## scope = character
### True if the scoped character is a child of the given character.
alias[trigger:is_child_of] = scope[character]

## scope = character
### True if the scoped character is a spouse, parent, chlid, sibling, grandparent or grandchild of the given character.
alias[trigger:is_close_relative] = scope[character]

## scope = character
### Checks if the scoped character is a concubine/consort of somebody.
alias[trigger:is_consort] = bool

## scope = character
### True if the scoped character is a concubine/consort of the given character.
alias[trigger:is_consort] = scope[character]

# TODO: Confirm
## scope = character
### Checks if the scoped character's council is content.
alias[trigger:is_council_content] = bool

## scope = character
### Checks if the scoped character has a job title.
alias[trigger:is_councillor] = bool

## scope = character
### Checks if scoped character is related to the given character by way of parental siblings.
alias[trigger:is_cousin_of] = bool

## scope = character
### True if the scoped character is descended from the given character, within up to sixteen generations. Expensive, use with care.
alias[trigger:is_descendant_of] = scope[character]

## scope = character
### Checks if the scoped character is about to die. Used for on_actions called just when character dies, such as on_chronicle_owner_change.
alias[trigger:is_dying] = bool

# TODO: Confirm; Possibly perceived/real only?
## scope = character
### True if the scoped character is the given character's father.
alias[trigger:is_father] = scope[character]

## scope = character
### Checks if the scoped character's perceived father is his real father.
alias[trigger:is_father_real_father] = bool

## scope = character
### Checks if the scoped character is female.
alias[trigger:is_female] = bool

# TODO: reword/elaborate
## scope = character
### True if the given character is_rival or has an opinion modifier with crime = yes towards the scoped character.
alias[trigger:is_foe] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_former_lover] = scope[character]

## scope = character
### True if the scoped character is a friend of the given character
alias[trigger:is_friend] = scope[character]

## scope = character
### True if the scoped character matches the potential block of the given government.
alias[trigger:is_government_potential] = <government>

## scope = character
### True if the scoped character is the son or daughter of the given character's son or daughter.
alias[trigger:is_grandchild_of] = scope[character]

## scope = character
### True if the scoped character is the father or mother of the given character's father or mother.
alias[trigger:is_grandparent_of] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_guardian] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:is_guardian] = scope[character]

## scope = character
### Checks if the scoped character is first in the succession line of any title.
alias[trigger:is_heir] = bool

# TODO: Confirm.
## scope = character
### True if the scoped character is first in the succession line of any of the given character's titles.
alias[trigger:is_heir] = scope[character]

## scope = character
### Checks if the scoped character has any trait with is_illness = yes.
alias[trigger:is_ill] = bool

## scope = character
### Checks if the scoped character has been flagged with the set_immune_to_pruning command, or by the internal game logic, and will not be culled from AI courts or savegames to reduce file size/memory use.
alias[trigger:is_immune_to_pruning] = bool

## scope = character
### True if the scoped and the given characters are in the same unit. Does NOT check every unit on a side of a combat, unlike any/random_unit_leader.
alias[trigger:is_in_same_unit_as] = scope[character]

## scope = character
### Checks if the scoped character is a member of any society.
alias[trigger:is_in_society] = bool

# TODO: Does scope[society] work?
## scope = character
### True if the scoped character is a member of the given society.
alias[trigger:is_in_society] = <society>

## scope = character
### Checks if the scoped character is incapable.
alias[trigger:is_incapable] = bool

## scope = character
### Checks if the scoped character is currently showing interest in a society.
alias[trigger:is_interested_in_any_society] = bool

# TODO: elaborate I guess
## scope = character
### Used in achievements.txt
alias[trigger:is_ironman] = bool

## scope = character
### Checks if the scoped character owns amy landed title.
alias[trigger:is_landed] = bool

## scope = character
### True if the scoped character meets the allow conditions of the given title.
alias[trigger:is_landed_title_allowed] = scope[title]

# TODO: confirm directness
## scope = character
### True if the scoped character is the direct liege of the given character.
alias[trigger:is_liege_of] = scope[character]

# TODO: confirm directness
## scope = character
### True if the scoped character is the direct liege of the given title's holder.
alias[trigger:is_liege_of] = scope[title]

# TODO: confirm directness
## scope = character
### True if the scoped character is the direct liege of the given province's owner.
alias[trigger:is_liege_of] = scope[province]

# TODO: scope title/province?
## scope = character
### True if the scoped character is superiour to the given character in the hierarchy.
alias[trigger:is_liege_or_above_of] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_looting] = bool

# TODO: in or leading? Confirm, I'm assuming here mostly
## scope = character
### True if the scoped character is in a unit that is raiding the given province.
alias[trigger:is_looting_in] = scope[province]

## scope = character
### Checks if the scoped character is a lover of any character.
alias[trigger:is_lover] = bool

## scope = character
### Checks if the scoped character is a lover of the given character.
alias[trigger:is_lover] = scope[character]

## scope = character
### Checks if the scoped character is lowborn (dynasty = none).
alias[trigger:is_lowborn] = bool

# TODO: Multihusband in HF?
## scope = character
### Checks if the scoped character is the main spouse of anyone.
alias[trigger:is_main_spouse] = bool

## scope = character
### Checks if the scoped character is old enough to marry, based on AGE_OF_MARRIAGE_MALE and AGE_OF_MARRIAGE_FEMALE.
alias[trigger:is_marriage_adult] = bool

## scope = character
### Checks if the scoped character is married to anyone.
alias[trigger:is_married] = bool

## scope = character
### True if the scoped character is married to the given character.
alias[trigger:is_married] = scope[character]

## scope = character
### Checks if the scoped character is matrilineally married to anyone.
alias[trigger:is_married_matrilineally] = bool

## scope = character
### True if the scoped character is the given character's mother.
alias[trigger:is_mother] = scope[character]

# TODO: Also possibly true for the one player in SP?
## scope = character
### Checks if the scoped character's player is the host in a multiplayer game.
alias[trigger:is_multiplayer_host_character] = bool

## scope = character
### True if the scoped character is a child of any of the given character's siblings.
alias[trigger:is_nibling_of] = scope[character]

## scope = character
### Checks if the scoped character's government is part of the nomadic_governments group.
alias[trigger:is_nomadic] = bool

## scope = character
### Checks if the scoped character is the governor of an offmap power.
alias[trigger:is_offmap_governor] = bool

# TODO: scope[offmap]?
## scope = character
### True if the scoped character is the governor of the given offmap power.
alias[trigger:is_offmap_governor] = <offmap>

## scope = character
### Checks if the scoped character is the ruler of an offmap power.
alias[trigger:is_offmap_ruler] = bool

# TODO: scope[offmap]?
## scope = character
### True if the scoped character is a current or former member of the given offmap power.
alias[trigger:is_offmap_tag_including_dead] = <offmap>

# TODO: Confirm
## scope = character
### True if the scoped character is older than the given character. Even works for twins and other characters with the same age (based on their ids?).
alias[trigger:is_older_than] = scope[character]

## scope = character
### True if the scoped character has sex opposite of the given character.
alias[trigger:is_opposite_sex] = scope[character]

## scope = character
### Checks if the scoped character is currently the ruler of any offmap power, or died while holding that title.
alias[trigger:is_or_was_offmap_power_ruler] = bool

## scope = character
### True if the scoped character is the mother or father of the given character.
alias[trigger:is_parent_of] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_parent_religion] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_parent_religion] = scope[province]

# TODO: Figure out
## scope = character
###
alias[trigger:is_parent_religion] = scope[title]

## scope = character
### Checks if the scoped character is the head of a Merchant Republic patrician family.
alias[trigger:is_patrician] = bool

## scope = character
### Checks if the scoped character has any trait with pilgrimage = yes.
alias[trigger:is_pilgrim] = bool

## scope = character
### Checks if the scoped character is playable.
alias[trigger:is_playable] = bool

# TODO: Figure out
## scope = character
### In conjunction with leads_faction
alias[trigger:is_plot_active] = bool

# TODO: Confirm
## scope = character
### True if the scoped character is the target of the given character's plot.
alias[trigger:is_plot_target_of] = scope[character]

## scope = character
### Checks if the scoped character is considered a powerful vassal.
alias[trigger:is_powerful_vassal] = bool

## scope = character
### Checks if the scoped character is pregnant.
alias[trigger:is_pregnant] = bool

# TODO: Confirm, genericise description - court chaplain and theocracy is likely too specific, probably based on some values in the govts/jobs (is_spiritual = yes?)
## scope = character
### Checks if the scoped character is either a Court Chaplain or landed with the Theocracy government type
alias[trigger:is_priest] = bool

## scope = character
### Checks if the scoped character is first in the succession line of any title that is primary to their holder.
alias[trigger:is_primary_heir] = bool

## scope = character
### True if the scoped character is first in the succession line of the given character's primary title.
alias[trigger:is_primary_heir] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_primary_war_attacker] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:is_primary_war_defender] = bool

# TODO: Figure out
## scope = character
###
alias[trigger:is_reincarnated] = bool

# TODO: Confirm, crossreference with is_foe
## scope = character
### True if the scoped character is a rival of the given character.
alias[trigger:is_rival] = scope[character]

## scope = character
### Checks if the scoped character holds any title, including landless.
alias[trigger:is_ruler] = bool

# TODO: Confirm scope, reword
## scope = any
### Checks if the game has been loaded from a save (used for startup events).
alias[trigger:is_save_game] = bool

## scope = character
### Checks if either the culture or religion of the scoped character have seafarer = yes.
alias[trigger:is_seafarer] = bool

## scope = character
### Checks if the scoped character has any concubine/consort.
alias[trigger:is_senior_consort_party] = bool

## scope = character
### Checks if the scoped character is perceived to be a part of any secret society.
alias[trigger:is_society_discovered] = bool

## scope = character
### Checks if the scoped character is perceived to be a part of any secret society and actually belongs to it.
alias[trigger:is_society_discovered_real] = bool

## scope = character
### Checks if the scoped character is the grandmaster of their society.
alias[trigger:is_society_grandmaster] = bool

## scope = character
### Checks if the scoped character is the leader of a subunit.
alias[trigger:is_sub_unit_leader] = bool

## scope = character
### Checks if the scoped character has a job title with is_treasurer = yes.
alias[trigger:is_treasurer] = bool

## scope = character
### Checks if the scoped character is tributary to a suzerain.
alias[trigger:is_tributary] = bool

## scope = character
### True if the scoped character is a tributary of the given type to a suzerain.
alias[trigger:is_tributary] = {
    type = <tributary_type>
}

## scope = character
### True if the scoped character is a tributary to a given suzerain.
alias[trigger:is_tributary] = {
    suzerain = scope[character]
}

## scope = character
### True if the scoped character is a tributary of the given type to a given suzerain.
alias[trigger:is_tributary] = {
    type = <tributary_type>
    suzerain = scope[character]
}

## scope = character
### True if the scoped character is the given character's twin.
alias[trigger:is_twin_of] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_valid_attraction] = scope[character]

# TODO: Figure out
## scope = character
###
alias[trigger:is_valid_romance_target] = scope[character]

## scope = character
### True if the scoped character is superiour to the given character in the hierarchy.
alias[trigger:is_vassal_or_below] = scope[character]

## scope = character
### True if the given character is superiour to the scoped character in the hierarchy.
alias[trigger:is_vassal_or_below_of] = scope[character]

## scope = character
### Checks if the scoped character holds a minor or job title with is_voter = yes.
alias[trigger:is_voter] = bool

## scope = character
### True if the given character is within the diplomatic range of the scoped character.
alias[trigger:is_within_diplo_range] = scope[character]

## scope = character
### Compares with the number of traits with leader = yes the scoped character has.
alias[trigger:leader_traits] = int

## scope = character
### Checks if the scoped character is leading any faction.
alias[trigger:leads_faction] = bool

## scope = character
### True if the scoped character is leading a faction of the given type.
alias[trigger:leads_faction] = <objective.faction>

## scope = character
### Compares with the scoped character's own learning.
alias[trigger:learning] = int

## scope = character
### Compares with the number of traits with lifestyle = yes the scoped character has.
alias[trigger:lifestyle_traits] = int

# TODO: scope[offmap]?
## scope = character
### True if the scoped character matches the current like of the given offmap power. If the like trigger has a context, the context parameter must match to return true. If the like trigger has no context, the context parameter must be omitted to return true.
alias[trigger:liked_by_offmap] = {
    type = <offmap>
    ## cardinality = 0..1
    context = value[offmap_like_context]
}

# TODO: Strictly better or equal or better? Wiki implies it's the latter, but gotta confirm
## scope = character
### True if the scoped character has better opinion of who than of than.
alias[trigger:likes_better_than] = {
    who = scope[character]
    than = scope[character]
}

## scope = character
### True if the scoped character has any non-temporary titles with higher tier than the given tier.
alias[trigger:lower_real_tier_than] = enum[title_tiers]

## scope = character
### True if the scoped character has any non-temporary titles with higher tier than the given character's tier.
alias[trigger:lower_real_tier_than] = scope[character]

## scope = character
### Compares with the scoped character's own martial.
alias[trigger:martial] = int

# STOPPED HERE

## scope = character
###
alias[trigger:max_manpower] = int

## scope = character
### Checks if the month of the character's date of birth is at least this number (January is month 1)
alias[trigger:month_of_birth] = int

## scope = character
### Checks if the character's monthly piety is at least this amount.
alias[trigger:monthly_piety] = float

## scope = character
### Checks if the character's monthly prestige is at least this amount.
alias[trigger:monthly_prestige] = float

## scope = character
### Number of provinces with given culture
alias[trigger:num_culture_realm_provs] = clause

## scope = character
### Checks if if scoped character has at least the given number of artifacts.
alias[trigger:num_of_artifacts] = int

## scope = character
###
alias[trigger:num_of_baron_titles] = int

## scope = character
### Note: Both living and deceased children are counted.
alias[trigger:num_of_children] = int

## scope = character
###
alias[trigger:num_of_claims] = int

## scope = character
### Checks the number of
alias[trigger:num_of_consorts] = int

## scope = character
###
alias[trigger:num_of_count_titles] = int

## scope = character
###
alias[trigger:num_of_count_titles_in_realm] = int

## scope = character
###
alias[trigger:num_of_duke_titles] = int

## scope = character
###
alias[trigger:num_of_dynasty_members] = int

## scope = character
###
alias[trigger:num_of_emperor_titles] = int

## scope = character
###
alias[trigger:num_of_extra_landed_titles] = int

## scope = character
### Checks the number of supporters for a given faction
alias[trigger:num_of_faction_backers] = clause

## scope = character
###
alias[trigger:num_of_feuds] = int

## scope = character
###
alias[trigger:num_of_friends] = int

## scope = character
###
alias[trigger:num_of_government_vassals] = clause

## scope = character
### Number of holy sites controlled by the religion
alias[trigger:num_of_holy_sites] = int

## scope = character
### Number of hospitals the character controls
alias[trigger:num_of_hospitals] = int

## scope = character
### Difference in number of hospitals controlled between 2 characters
alias[trigger:num_of_hospitals_diff] = clause

## scope = character
###
alias[trigger:num_of_king_titles] = int

## scope = character
###
alias[trigger:num_of_lovers] = int

## scope = character
###
alias[trigger:num_of_plot_backers] = int

## scope = character
###
alias[trigger:num_of_prisoners] = int

## scope = character
### Scoped character controls at least N counties from specified title
alias[trigger:num_of_realm_counties] = clause

## scope = character
###
alias[trigger:num_of_rivals] = int

## scope = character
###
alias[trigger:num_of_spouses] = int

## scope = character
###
alias[trigger:num_of_subrealm_castles] = int

## scope = character
### Number of traits with is_symptom = yes
alias[trigger:num_of_symptoms] = int

## scope = character
### Number of titles directly held by the character. Note that for this condition each County title is worth 2 while Barony, Duchy, Kingdom and Empire-tier titles are worth 1 each.
alias[trigger:num_of_titles] = int

## scope = character
### Difference of trade posts between 2 characters
alias[trigger:num_of_trade_post_diff] = clause

## scope = character
### Number of trade posts
alias[trigger:num_of_trade_posts] = int

## scope = character
### Number of traits
alias[trigger:num_of_traits] = int

## scope = character
### Number of vassals of different dynasties (excluding the dynasty of scoped character).
alias[trigger:num_of_unique_dynasty_vassals] = int

## scope = character
### Number of direct vassals
alias[trigger:num_of_vassals] = int

## scope = character
### Duplicate of num_of_traits
alias[trigger:num_traits] = int

## scope = character
### Checks if the scoped character is obedient to the target character, e.g. has an opinion modifier with obedient = yes toward the target character.
alias[trigger:obedient] = scope[character]

## scope = character
### Checks if the scope's opinion of who is at least this value
alias[trigger:opinion] = clause

## scope = character
### True if first target character has a higher opinion of the currently scoped character than second target character by at least value points.
alias[trigger:opinion_diff] = clause

## scope = character
###
alias[trigger:opinion_levy_raised_days] = clause

## scope = character
###
alias[trigger:over_max_demesne_size] = int

## scope = character
###
alias[trigger:over_vassal_limit] = int

## scope = character
###
alias[trigger:overlord_of] = scope[character]

## scope = character
### Checks if a character owes a favor to another character. The reverse condition is holds_favor_on.
alias[trigger:owes_favor_to] = scope[character]

## scope = character
###
alias[trigger:owns] = scope[province]

## scope = character
### Checks if character owns mercenary units
alias[trigger:owns_mercenary_units] = bool

## scope = character
###
alias[trigger:pacifist] = bool

## scope = character
###
alias[trigger:pays_tribute_to] = scope[character]

## scope = character
### Similar to opinion, but does not take state diplomacy, laws or any other such state concerns into account
alias[trigger:personal_opinion] = clause

## scope = character
### Similar to opinion_diff, but does not take state diplomacy, laws or any other such state concerns into account
alias[trigger:personal_opinion_diff] = clause

## scope = character
### Number of traits with personality = yes
alias[trigger:personality_traits] = int

## scope = character
### The amount of piety a character has.
alias[trigger:piety] = int

## scope = character
### Tests if a plot is known by another character
alias[trigger:plot_is_known_by] = scope[character]

## scope = character
### Typically ranges from 0.5 to 4.0 in vanilla
alias[trigger:plot_power] = float

## scope = character
###
alias[trigger:plot_power_contribution] = clause

## scope = character
###
alias[trigger:population] = int

## scope = character
###
alias[trigger:population_and_manpower] = int

## scope = character
### Percentage of maximum population.
alias[trigger:population_factor] = float

## scope = character
### Checks the apparent age of the character, taking immortality into account -- e.g., if the character became immortal at age 40, this will yield 40 rather than their true age.
alias[trigger:practical_age] = int

## scope = character
###
alias[trigger:preparing_invasion] = bool

## scope = character
### The amount of prestige a character has.
alias[trigger:prestige] = int

## scope = character
### If no, can't be applied to imprisoned characters. Can also be used as an event pre-trigger.
alias[trigger:prisoner] = bool

## scope = character
### Same as culture condition. Checks if a character's culture matches that of a specified culture or character. This is different from graphical_culure, i.e when comparing two cultures that have the same culturegfx, race still evaluates to false.
alias[trigger:race] = scope[character]

## scope = character
### Same as culture condition. Checks if a character's culture matches that of a specified culture or character. This is different from graphical_culure, i.e when comparing two cultures that have the same culturegfx, race still evaluates to false.
alias[trigger:race] = <culture>

## scope = character
### Returns true if the percentage of characters in the scoped character's realm fulfilling the condition is equal to or greater than the target.
alias[trigger:realm_character_percent] = clause

## scope = character
### Compares with the scoped character's state diplomacy.
alias[trigger:realm_diplomacy] = int

## scope = character
### Compares with the scoped character's state intrigue.
alias[trigger:realm_intrigue] = int

## scope = character
### Compares with the scoped character's state learning.
alias[trigger:realm_learning] = int

## scope = character
###
alias[trigger:realm_levies] = int

## scope = character
###
alias[trigger:realm_levy_diff] = clause

## scope = character
### Compares with the scoped character's state martial.
alias[trigger:realm_martial] = int

## scope = character
### Total number of landed titles in the realm
alias[trigger:realm_size] = int

## scope = character
### Compares with the scoped character's state stewardship.
alias[trigger:realm_stewardship] = int

## scope = character
### Compares the income of character and of his liege
alias[trigger:relative_income_to_liege] = float

## scope = character
### Check that currently scoped character has at least power percentage of who's power.
alias[trigger:relative_power] = clause

## scope = character
### Check that currently scoped character (plus its potential allies in an offensive war) have at least power percentage of who's power.
alias[trigger:relative_power_including_allies_attacker] = clause

## scope = character
### Check that currently scoped character (plus its potential allies in a defensive war) have at least powerpercentage of who's power.
alias[trigger:relative_power_including_allies_defender] = clause

## scope = character
###
alias[trigger:relative_power_to_liege] = float

## scope = character
### (2.8) Compares the realm size of the scoped character with the character specified by who. Can use comparison operators (=, >, <, <=, >=, ==).
alias[trigger:relative_realm_size] = clause

## scope = character
### Checks religion flag allows_female_temple_holders
alias[trigger:religion_allows_female_temple_holders] = bool

## scope = character
### Checks religion flag allows_male_temple_holders
alias[trigger:religion_allows_male_temple_holders] = bool

## scope = character
###
alias[trigger:republic_total_num_of_trade_posts] = int

## scope = character
###
alias[trigger:reverse_clan_opinion] = clause

## scope = character
### Checks if 'who' character has the given opinion modifier towards scoped character
alias[trigger:reverse_has_opinion_modifier] = clause

## scope = character
###
alias[trigger:reverse_has_truce] = scope[character]

## scope = character
### Similar to reverse_opinion, but does not take state diplomacy, laws or any other such state concerns into account
alias[trigger:reverse_personal_opinion] = clause

## scope = character
### Does not take state diplomacy, laws or any other such state concerns into account
alias[trigger:reverse_personal_opinion_diff] = clause

## scope = character
###
alias[trigger:rightful_religious_head] = scope[character]

## scope = character
###
alias[trigger:risks_minor_clan_rising] = bool

## scope = character
###
alias[trigger:same_guardian] = scope[character]

## scope = character
###
alias[trigger:same_liege] = scope[character]

## scope = character
### Checks if two characters have the same regnal name for numbering purposes. Regnal names are currently defined as having the same first first name (E.G., ""Gustav"" and ""Gustav Adolf"" are the same regnal name), or the same cultural first first name (E.G., ""Alfr_Alf"" and ""Alf_Alf"" are the same regnal name).
alias[trigger:same_regnal_name] = scope[character]

## scope = character
### Checks if two characters have same sex.
alias[trigger:same_sex] = scope[character]

## scope = character
### Checks if scope character is in the same society as target character.
alias[trigger:same_society_as] = scope[character]

## scope = character
### Check if character has the given wealth based on percentage of yearly income. Before 2.8, the clause syntax is not available.
alias[trigger:scaled_wealth] = float/clause

## scope = character
### Current score of the player
alias[trigger:score] = int

## scope = character
### Checks if character secretly follows the given religion
alias[trigger:secret_religion] = <religion>

## scope = character
### Checks if character secretly follows a religion in the given religion group
alias[trigger:secret_religion_group] = <religion_group>

## scope = character
### Returns true is both characters have at least one bloodline in common
alias[trigger:shares_any_bloodline_with] = scope[character]

## scope = character
### (2.8) Checks if any province in your realm (everything under your titles) borders any province in their realm.
alias[trigger:shares_realm_border_with] = scope[character]

## scope = character
###
alias[trigger:sibling] = scope[character]

## scope = character
### Checks if the character can rank down within their society
alias[trigger:society_can_rank_down] = bool

## scope = character
### Checks if the character can rank up within their society
alias[trigger:society_can_rank_up] = bool

## scope = character
### Checks if character has the given number of society points. Can add a scaled_by_influence parameter to scale by society influence, going from a 70% reduction when the society is at 100% influence and going linearly to a 0% reduction at 0% influence
alias[trigger:society_currency] = <society>

## scope = character
### Checks if character's society is criminal or not.
alias[trigger:society_is_criminal] = bool

## scope = character
### Checks if character's society is a devil worshiping society or not.
alias[trigger:society_is_devil_worshiper] = bool

## scope = character
### Checks if character belongs to the given society
alias[trigger:society_member_of] = <society>

## scope = character
### Compares with the scoped character's own stewardship.
alias[trigger:stewardship] = int

## scope = character
###
alias[trigger:symptom] = trait #(?)

## scope = character
###
alias[trigger:their_opinion] = clause

## scope = character
###
alias[trigger:total_claims] = clause

## scope = character
### (2.8) Checks the amount of control of the scoped character (others?) over the specified trade route's wealth, provinces, trade posts, or trade post locations.
alias[trigger:trade_route_control] = clause

## scope = character
### Checks if the character has this trait
alias[trigger:trait] = <trait>

## scope = character
###
alias[trigger:treasury] = float

## scope = character
### If the character has a secret religion, checks if character secretly follows the given religion, otherwise checks if the character publicly follows the given religion
alias[trigger:true_religion] = <religion>

## scope = character
### If the character has a secret religion, checks if character secretly follows a religion in the given religion group, otherwise checks if the character publicly follows a religion in the given religion group
alias[trigger:true_religion_group] = <religion_group>

## scope = character
###
alias[trigger:unused_manpower] = int

## scope = character
### Character has decadence mechanic via religion/government.
alias[trigger:uses_decadence] = bool

## scope = character
###
alias[trigger:vassal_of] = scope[character]

## scope = character
### Checks if the character is in war
alias[trigger:war] = bool

## scope = character
### Returns true if people are hostile due to raiding or if their armies are hostile because of a personal, liege or third party war.[3]
alias[trigger:war_with] = scope[character]

## scope = character
### Returns true if people are hostile due to raiding or if their armies are hostile because of a personal, liege or third party war.[3]
alias[trigger:war_with] = <title>

## scope = character
###
alias[trigger:was_conceived_a_bastard] = bool

## scope = character
### The minimum amount of gold this character should have
alias[trigger:wealth] = int

## scope = character
### See also has_liege_enforced_peace
alias[trigger:will_liege_enforce_peace] = bool

## scope = character
### Checks if the character was born in this year or later
alias[trigger:year_of_birth] = int

## scope = { character title }
### Whether character is the head of a nomadic clan, or title is a nomadic clan.
alias[trigger:clan] = bool

## scope = character
### Checks if character's rank compares correctly to the value or character given. Works with all comparison operators ( <, <=, =, >=, >=). Can use clause to additionally check if character belongs to named society.
alias[trigger:society_rank] = <society>

## scope = character/new
### Checks if who's opinion of the scope is at least value. new can be used to reference the new_character scope.
alias[trigger:reverse_opinion] = clause

## scope = { character province }
### Used in conjunction with change_variable command.
alias[trigger:check_variable] = clause

## scope = { character province }
### Determines the minimum distance from the scope. If used with NOT, it becomes maximum distance. Distances are pixels within the main map images & positions.txt
alias[trigger:distance] = clause

## scope = { character province }
###
alias[trigger:has_disease] = bool

## scope = { character province }
### Checks for a trait with is_epidemic = yes, and checks if a province has an epidemic.
alias[trigger:has_epidemic] = bool

## scope = { character province }
###
alias[trigger:has_heresies] = bool

## scope = { character province }
### Checks if the character or province's religion has the field hard_to_convert = yes
alias[trigger:is_hard_to_convert] = bool

## scope = { character province }
###
alias[trigger:is_heresy_of] = character/province/title/religion

## scope = { character province }
###
alias[trigger:is_heretic] = bool

## scope = { character province }
###
alias[trigger:is_liege_or_above] = character/title/province

## scope = { character province }
### Checks if the religion of character or province is a reformed pagan religion.
alias[trigger:is_reformed_religion] = bool

## scope = { character province }
### Checks if the religion of character or province is a reformed pagan religion.
#TODO: Check
alias[trigger:is_reformed_religion] = scope[character]

## scope = { character province }
### Checks if a variable has the exact value, instead of standard >= check. See variables.
alias[trigger:is_variable_equal] = clause

## scope = { character province }
### Checks if character/province has the given religion
alias[trigger:religion] = <religion>

## scope = { character province }
### Ranges from 0 to 1
alias[trigger:religion_authority] = float

## scope = { character province }
### Checks if character's/province's religion belongs to the given religion group
alias[trigger:religion_group] = <religion_group>

## scope = { character province title }
### Checks if the character has this specific culture
alias[trigger:culture] = <culture>

## scope = { character province title }
### Checks if the character has this specific culture
# TODO: Scope version
alias[trigger:culture] = character/province/title

## scope = { character province title }
### Checks if the character is part of this culture group
alias[trigger:culture_group] = <culture_group>

## scope = { character province title }
### Checks if the character is part of this culture group
# TODO: Scope version
alias[trigger:culture_group] = character/province/title

## scope = character/society
### (2.8) Number of members who are in the scoped society or scoped character's society. Supports 2.8 <, >=, ==, and <= operators.
alias[trigger:num_of_society_members] = int

## scope = { character title }
### If yes, only picks characters who are the head of their religion (holder of a title with a flag controls_religion = <religion>)
alias[trigger:controls_religion] = bool

## scope = { character title }
### Checks that the defacto liege title of a character or title is the right-hand side.
alias[trigger:de_facto_liege_title] = character/title

## scope = { character title }
### Checks whether current scope is a de jure liege of right hand side scope.
alias[trigger:de_jure_vassal_or_below] = character/title

## scope = { character title }
### Checks for dislike_tribal_organization religion flag
alias[trigger:dislike_tribal_organization] = bool

## scope = { character title }
###
alias[trigger:has_law] = <law>

## scope = { character title }
### Check that the tier of scoped character/title is strictly higher than the given tier.
alias[trigger:higher_tier_than] = character/tier/title

## scope = { character title }
###
alias[trigger:holy_order] = bool

## scope = { character title }
###
alias[trigger:independent] = bool

## scope = { character title }
### Checks if government is part of feudal_governments group.
alias[trigger:is_feudal] = bool

## scope = { character title }
### Checks if character is the doge of a merchant republic or if title is a merchant republic.
alias[trigger:is_merchant_republic] = bool

## scope = { character title }
### In title scope, checks vs ROOT character.
alias[trigger:is_pretender] = bool

## scope = { character title }
### Checks if government is part of republic_governments group.
alias[trigger:is_republic] = bool

## scope = { character title }
### Checks if government is part of theocracy_governments group.
alias[trigger:is_theocracy] = bool

## scope = { character title }
### Yes, will only affect characters who are of a lower tier
alias[trigger:lower_tier_than] = character/tier

## scope = { character title }
###
alias[trigger:mercenary] = bool

## scope = { character title }
### Same as tier but ignores temporary titles
alias[trigger:real_tier] = character/title/tier

## scope = { character title }
###
alias[trigger:rebel] = bool

## scope = { character title }
###
alias[trigger:ruled_years] = int

## scope = { character title }
###
alias[trigger:same_realm] = scope[character]

## scope = { character title }
### Values: baron, count, duke, king, emperor
#TODO: Enum
alias[trigger:tier] = string

## scope = { character title }
###
alias[trigger:title] = title/province

## scope = { character title } #(holding)
###
alias[trigger:monthly_income] = float

## scope = { character title } #(holding)
###
alias[trigger:yearly_income] = float

## scope = { character title } #(holding)
### Checks if government is part of tribal_governments group.
alias[trigger:is_tribal] = bool

## scope = { character title province }
###
alias[trigger:de_facto_liege] = character/title

## scope = { character title province }
### Checks whether current scope is a direct de jure vassal of right hand side scope.
alias[trigger:de_jure_liege] = character/title

## scope = { character title province }
### Checks whether current scope is a de jure vassal of right hand side scope.
alias[trigger:de_jure_liege_or_above] = character/title

## scope = { character title province }
### Checks if the current scope is being targeted by a quest.
alias[trigger:is_quest_target] = bool

## scope = { character title province }
### Checks if the current scope is being targeted by any quest the given character has.
alias[trigger:is_quest_target_of] = bool

## scope = holding
### Checks how full the holding's garrison is. 1 is 100%, 0 is 0%.
alias[trigger:holding_garrison_percent] = float

## scope = holding
### Checks how full the holding's raisable levy is. 1 is 100%, 0 is 0%.
alias[trigger:holding_raisable_levy_percent] = float

## scope = holding
### Checks how full the holding's total levy (garrison + raisable) is. 1 is 100%, 0 is 0%.
alias[trigger:holding_total_levy_percent] = float

## scope = offmap
### True if the specified number of days has passed since the last policy change of the scoped offmap power. Accepts comparison operators.
alias[trigger:days_since_policy_change] = int

## scope = offmap
### True if the specified number of days has passed since the last status change of the scoped offmap power. Accepts comparison operators.
alias[trigger:days_since_status_change] = int

# TODO: Confirm if status/policy flags work
## scope = offmap
### Compares duration to how long the given flag has been set in the scoped offmap, if at all.
alias[trigger:had_offmap_flag] = {
    flag = value[offmap_tmp_flag]
    flag = value[offmap_status_flag]
    flag = value[offmap_policy_flag]

    enum[duration_dy] = int
}

## scope = offmap
###
alias[trigger:has_had_offmap_name] = localisation

## scope = offmap
### True if the scoped offmap power has the given flag currently set via script or in status/policy.
alias[trigger:has_offmap_flag] = value[offmap_tmp_flag]

## scope = offmap
### True if the scoped offmap power has the given flag currently set via script or in status/policy.
alias[trigger:has_offmap_flag] = value[offmap_status_flag]

## scope = offmap
### True if the scoped offmap power has the given flag currently set via script or in status/policy.
alias[trigger:has_offmap_flag] = value[offmap_policy_flag]

## scope = offmap
### Checks if the scoped offmap power has the specified localisation key as its current name.
alias[trigger:has_offmap_name] = localisation

## scope = offmap
### True if the scoped offmap power has the given flag currently set.
alias[trigger:has_offmap_tmp_flag] = value[offmap_tmp_flag]

## scope = offmap
### Checks if the scoped offmap power currently has the specified offmap policy (defined in /common/offmap_powers/policies).
alias[trigger:has_policy] = <policy>

## scope = offmap
### Checks if the scoped offmap power currently has the specified offmap status modifier (defined in /common/offmap_powers/statuses).
alias[trigger:has_status] = <status>

## scope = offmap
### True if the scoped offmap power has the specified flag in its current status' flags list.
alias[trigger:has_status_flag] = value[offmap_status_flag]

## scope = offmap
### True if the scoped offmap power has the specified flag in its current policy's flags list.
alias[trigger:has_status_flag] = value[offmap_policy_flag]

## scope = offmap
### Checks if the current scoped offmap power is the offmap power with the specified ID
alias[trigger:is_offmap_tag] = value[offmap_tag]

## scope = offmap
### Checks whether the scoped offmap power has their current ""dislike"" assigned to the named scripted trigger. Note that in spite of ""dislike"" being negative, the vanilla triggers are shared between likes and dislikes, and therefore named in the positive (e.g., the current ""dislike"" may be ""likes'_wealth"" -- do not use ""dislikes_wealth"").
alias[trigger:offmap_has_dislike] = string

## scope = offmap
### Checks whether the scoped offmap power has their current ""like"" assigned to the named scripted trigger.
alias[trigger:offmap_has_like] = string

## scope = offmap
### Checks if the scoped offmap power previously had the specified offmap policy.
alias[trigger:prev_policy] = <policy>

## scope = offmap
### Checks if the scoped offmap power previously had the specified flag in its previous offmap status modifier's flags list.
alias[trigger:prev_policy_flag] = value[policy_flag]

## scope = offmap
### Checks if the scoped offmap power previously had the specified offmap status modifier.
alias[trigger:prev_status] = <status>

## scope = offmap
### Checks if the scoped offmap power previously had the specified flag in its previous offmap status modifier's flags list
alias[trigger:prev_status_flag] = value[status_flag]

## scope = province
### Province borders a lake
alias[trigger:borders_lake] = bool

## scope = province
### Province borders a major river
alias[trigger:borders_major_river] = bool

## scope = province
### Checks if it is possible to travel by land between two provinces. Can be expanded to also take a distance parameter.
alias[trigger:can_land_path_to] = province/clause

## scope = province
### Checks if it is possible to travel by sea between two provinces. Both provinces have to be sea or coastal. Can be expanded to also take a distanceparameter.
alias[trigger:can_naval_path_to] = province/clause

## scope = province
### Check whether a province has a winter climate defined in /map/climate.txt - does NOT check whether province is currently experiencing a winter, use is_winter for that.
alias[trigger:climate] = <climate.winter>

## scope = province
###
alias[trigger:continent] = continent

## scope = province
### Checks if the province has the specified disease.
alias[trigger:disease] = <disease>

## scope = province
### Checks if the province has at least the specified disease defence modifier.
alias[trigger:disease_defence] = int

## scope = province
### Compares duration to how long the given flag has been set in the scoped province, if at all.
alias[trigger:had_province_flag] = {
    flag = value[province_flag]
    enum[duration_dy] = int
}

## scope = province
###
alias[trigger:has_capital] = bool

## scope = province
###
alias[trigger:has_empty_holding] = bool

## scope = province
###
alias[trigger:has_higher_tech_than] = scope[character]

## scope = province
###
alias[trigger:has_higher_tech_than] = scope[province]

## scope = province
### Checks whether a province has a hospital
alias[trigger:has_hospital] = bool

## scope = province
### True if the scoped province has the given amount of instances of the given event modifier.
alias[trigger:has_instances_of_province_modifier] = {
    modifier = <event_modifier>
    amount = int
}

## scope = province
###
alias[trigger:has_owner] = bool

## scope = province
### True if the scoped province has the given flag currently set.
alias[trigger:has_province_flag] = value[province_flag]

## scope = province
### Checks if the province has the given province modifier
# TODO: subtype
alias[trigger:has_province_modifier] = <event_modifier>

## scope = province
### Checks if a holding is under construction in the province
alias[trigger:has_settlement_construction] = bool

## scope = province
### Checks if the hospital of the province has any buildings.
alias[trigger:hospital_has_any_building] = bool

## scope = province
### Checks if a hospital has the specified building.
alias[trigger:hospital_has_building] = <building>

## scope = province
### Checks if a province has at least the given hospital level.
alias[trigger:hospital_level] = int

## scope = province
### Checks if the province exists in island_region.txt.
alias[trigger:is_island] = bool

## scope = province
### Checks that province is not a sea province
alias[trigger:is_land] = bool

## scope = province
### Checks whether a province is currently experiencing a winter. To check whether it could experience a winter at all, regardless of current condition, use climate.
alias[trigger:is_winter] = bool

## scope = province
### Note: settlements under construction, do not count as empty.
alias[trigger:num_of_empty_holdings] = int

## scope = province
### Checks the current number of constructed or constructible holding slots in a province
alias[trigger:num_of_max_settlements] = int

## scope = province
### Number of baronies the province has (maximum 7)
alias[trigger:num_of_settlements] = int

## scope = province
### Checks for coastal provinces.
alias[trigger:port] = bool

## scope = province
### Checks currently scoped province to be the same as another.
alias[trigger:province] = scope[province]

## scope = province
### Checks if the scoped province has given province ID.
alias[trigger:province_id] = int

## scope = province
###
alias[trigger:revolt_risk] = float

## scope = province
### Similar to has_opinion_modifier.
alias[trigger:supply_limit] = clause

## scope = province
### Check whether technology can spread in the province.
alias[trigger:technology_can_spread] = bool

## scope = province
### Values: forest, hills, mountain, plains, farmlands, steppe, desert, jungle, arctic
alias[trigger:terrain] = <terrain>

## scope = province
### Checks if a trade post has at least 1 building.
alias[trigger:trade_post_has_any_building] = <building>

## scope = province
### Checks if a trade post has the specified building.
alias[trigger:trade_post_has_building] = <building>

## scope = province
### Checks if a province is on the specified trade route.
alias[trigger:trade_route] = <trade_route>

## scope = { province holding }
### Check whether the current holding or province has at least this level of technology in a particular tech category.
alias[trigger:<technology>] = int

## scope = { province title }
### If yes, will only affect the capital HOLDING
alias[trigger:is_capital] = bool

## scope = { province title county }
### Checks if two provinces are connected via some realm's territory. Can be somewhat performance intensive, so use sparingly.
alias[trigger:is_connected_to] = clause

## scope = { province title }
###
alias[trigger:has_trade_post] = bool

## scope = { religion character province }
### Checks for whether the associated religion has a pentarchy. Works with anything that has a religion
alias[trigger:has_pentarchy] = bool

## scope = siege
###
alias[trigger:is_attacker] = bool

## scope = siege
###
alias[trigger:troops] = clause

## scope = society
### Checks if the currently scoped society is the same as the given one.
alias[trigger:is_society] = <society>

## scope = society
### Checks if the society currently has an ongoing progress counter.
alias[trigger:society_has_active_progress] = bool

## scope = society
### Checks if the society has any members.
alias[trigger:society_has_members] = bool

## scope = society
### Checks if the society's active trigger is true.
alias[trigger:society_is_active] = bool

## scope = society
### Checks the society's current progress. Takes comparison operators.
alias[trigger:society_progress] = float

## scope = society/charactery/any
### Checks if a given society's influence compares to the given number. If no society name is given, it will use either the society in the current scope, or the society of the character in the current scope. If no society name is given, and the current scope is neither a society nor a character, it will always return false.
alias[trigger:society_influence] = int/clause

## scope = title
### Checks adventurer flag of the title (title that gets destroyed whenever the holder gains another title or when the holder dies).
alias[trigger:adventurer] = bool

## scope = title
### The title is not occupied, has no holdings being sieged, or contested in war.
alias[trigger:can_be_given_away] = bool

## scope = title
###
alias[trigger:claimed_by] = scope[character]

## scope = title
### If yes, only fires if conquest_culture is set (?). Certain CBs set Conquest_Culture (used for cultural conversion events)
alias[trigger:conquest_culture] = bool

## scope = title
### If yes, only fires if conquest_culture is set (?). Certain CBs set Conquest_Culture (used for cultural conversion events)
alias[trigger:conquest_culture] = scope[character]

## scope = title
### Compares duration to how long the given flag has been set in the scoped title, if at all.
alias[trigger:had_title_flag] = {
    flag = value[title_flag]
    enum[duration_dy] = int
}

## scope = title
### Checks if the holding has any building
alias[trigger:has_any_building] = bool

## scope = title
### Used to check crown laws for a specified title. Is not a condition itself though, it must be used as a scope to check crown laws by category (succession, for instance).
alias[trigger:has_crown_law_title] = bool

## scope = title
###
alias[trigger:has_de_jure_pretension] = scope[character]

## scope = title
### Checks whether a title is currently hold by a character.
alias[trigger:has_holder] = bool

## scope = title
### Checks if the holding has the given holding modifier
alias[trigger:has_holding_modifier] = modifier

## scope = title
### True if the scoped holding has the given amount of instances of the given event modifier.
alias[trigger:has_instances_of_holding_modifier] = {
    modifier = <event_modifier>
    amount = int
}

## scope = title
### Checks if character has already created a mercenary band.
alias[trigger:has_mercenary_band] = bool

## scope = title
### Checks for a static modifier added via set_mercenary_maintenance_modifier on scoped mercenary tile.
alias[trigger:has_mercenary_maintenance_modifier] = modifier

## scope = title
###
alias[trigger:has_raised_standing_troops] = bool

## scope = title
### True if the scoped title has the given flag currently set.
alias[trigger:has_title_flag] = value[title_flag]

## scope = title
### city / temple / castle / tribal / nomad / family_palace
alias[trigger:holding_type] = string

## scope = title
###
alias[trigger:is_conquered] = bool

## scope = title
### If title is already being contested in some form of Claim or Succession War
alias[trigger:is_contested] = bool

## scope = title
### Checks for titles that can have crown laws.
alias[trigger:is_crown_law_title] = bool

## scope = title
### Checks if a barony is a holy site of the religion of specified character
alias[trigger:is_holy_site] = character/religion

## scope = title
###
alias[trigger:is_landless_type_title] = bool

## scope = title
###
alias[trigger:is_located_in] = character/title

## scope = title
### Preferred holding type of character, based on its government.
alias[trigger:is_preferred_holding_type] = scope[character]

## scope = title
###
alias[trigger:is_primary_holder_title] = bool

## scope = title
###
alias[trigger:is_primary_holder_title_tier] = bool

## scope = title
### Checks the flag primary of the title, for titles that cannot be held as secondary title. This covers mercenaries, the Pope, Holy Orders, etc.
alias[trigger:is_primary_type_title] = bool

## scope = title
###
alias[trigger:is_recent_grant] = bool

## scope = title
###
alias[trigger:is_titular] = bool

## scope = title
###
alias[trigger:is_tribal_type_title] = bool

## scope = title
### Checks that FROM holds the right amount of territory in the kingdom
alias[trigger:is_valid_viking_invasion_target] = scope[character]

## scope = title
### Checks for viceroyalty flag on title
alias[trigger:is_vice_royalty] = bool

## scope = title
### Percentage of payment factor [?]
alias[trigger:mercenary_siphon_factor] = float

## scope = title
### Checks how many characters in ones court that would fit for a specific title
alias[trigger:num_fitting_characters_for_title] = int

## scope = title
###
alias[trigger:num_of_buildings] = int

## scope = title
### Number of counties in ROOT's realm.
alias[trigger:num_title_realm_provs] = clause

## scope = title
### Check if title is temporary one (revolt, claimant adventurer, ...)
alias[trigger:temporary] = bool

## scope = title
###
alias[trigger:would_be_heir_under_law] = clause

## scope = { title province }
### Checks if a holding has the specified building (under construction buildings do not count).
alias[trigger:has_building] = <building>

## scope = title(holding)
### Holding is under siege.
alias[trigger:has_siege] = bool

## scope = title(holding)
### Checks if holding type is allowed by the government of specified character
alias[trigger:is_allowed_holding_type] = scope[character]

## scope = { title province }
### Checks if scope belongs to a geographical region.
alias[trigger:region] = <region>

## scope = { title province }
### Checks if province/holding is occupied (war) by another character/realm
alias[trigger:controlled_by] = character/title

## scope = { title province }
### Checks if a barony or county is occupied by enemy troops. Does not work on duchy or above.
alias[trigger:is_occupied] = bool

## scope = unit
### Checks if a unit is a fleet.
alias[trigger:is_navy] = bool

## scope = unit
### Checks if the unit is in combat.
alias[trigger:unit_is_in_combat] = bool

## scope = unit?
### Used in unit_event achievement.
alias[trigger:loot] = int

## scope = war
###
alias[trigger:using_cb] = <casus_belli>

## scope = war
###
alias[trigger:war_participation] = float

## scope = war
###
alias[trigger:war_score] = float

## scope = war
###
alias[trigger:war_title] = title/province

## scope = any
### Number of elements matched by a scope. Since patch 2.3 works with all any_ scopes.
alias[trigger:count] = int

## scope = any
alias[trigger:is_decision_allowed] = <decision>
## scope = any
alias[trigger:is_law_allowed] = <decision>
## scope = any
alias[trigger:is_targetted_decision_allowed] = <decision>
## scope = any
alias[trigger:is_title_decision_allowed] = <decision>
## scope = any
alias[trigger:is_settlement_decision_allowed] = <decision>
## scope = any
alias[trigger:is_trade_post_decision_allowed] = <decision>
## scope = any
alias[trigger:is_fort_decision_allowed] = <decision>
## scope = any
alias[trigger:is_hospital_decision_allowed] = <decision>
## scope = any
alias[trigger:is_decision_potential] = <decision>
## scope = any
alias[trigger:is_law_potential] = <decision>
## scope = any
alias[trigger:is_targetted_decision_potential] = <decision>
## scope = any
alias[trigger:is_title_decision_potential] = <decision>
## scope = any
alias[trigger:is_settlement_decision_potential] = <decision>
## scope = any
alias[trigger:is_trade_post_decision_potential] = <decision>
## scope = any
alias[trigger:is_fort_decision_potential] = <decision>
## scope = any
alias[trigger:is_hospital_decision_potential] = <decision>

alias[trigger:custom_tooltip] = {
    text = localisation
    alias_name[trigger] = alias_match_left[trigger]

}

# TODO: Might be covered by scope_field
alias[trigger:hidden_tooltip] = {
    alias_name[trigger] = alias_match_left[trigger]
}
