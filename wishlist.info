- Referring to a property name in type localisation for types where localisation keys are explicit.
- starts_with filter for types/subtypes (for stuff like b_<title> or faction_<objective>).
- Autocomplete for matching nested types like options for game rules.
- Multiple path values for types.
- skip_root_key as OR or NOR (the former is needed for laws, the latter for alternate_start)
- A property, uh, property, that counts as a replacement for a parameter in a top-level type. For example, religion_group property ai_convert_other_group can be explicitly replaced by a religion. In such cases it should probably inform you what the default (religion_group value) currently is. Low priority as it's just religions.
- For property = int a "## frame_of_gfx_resource = <gfx_resource>" or something like that to make sure that the int is within [1..noOfFrames] for the gfx_resource.
- When adding a new member of a type, automatically add the "required" fields (cardinality equal to some fixed number above 0) like with aliases.
- For nested types in the localisation block - a variable for the parent type name (alternate starts need that if I'm doing options as types)
- Using define values in comments (### Default is [DEFINE].), cardinality (cardinality = define1..define3) and value bounds (int[0..define]).